<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoTorrent</name>
    </assembly>
    <members>
        <member name="T:MonoTorrent.BEncoding.BEncodedDictionary">
            <summary>
            Class representing a BEncoded Dictionary
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedDictionary.#ctor">
            <summary>
            Create a new BEncodedDictionary
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedDictionary.Encode(System.Byte[],System.Int32)">
            <summary>
            Encodes the dictionary to a byte[]
            </summary>
            <param name="buffer">The buffer to encode the data to</param>
            <param name="offset">The offset to start writing the data to</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedDictionary.DecodeTorrent(MonoTorrent.BEncoding.RawReader)">
            <summary>
            Special decoding method for torrent files - allows dictionary attributes to be out of order for the
            overall torrent file, but imposes strict rules on the info dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedDictionary.LengthInBytes">
            <summary>
            Returns the size of the dictionary in bytes using UTF8 encoding
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.BEncoding.BEncodedList">
            <summary>
            Class representing a BEncoded list
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedList.#ctor">
            <summary>
            Create a new BEncoded List with default capacity
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedList.#ctor(System.Int32)">
            <summary>
            Create a new BEncoded List with the supplied capacity
            </summary>
            <param name="capacity">The initial capacity</param>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedList.Encode(System.Byte[],System.Int32)">
            <summary>
            Encodes the list to a byte[]
            </summary>
            <param name="buffer">The buffer to encode the list to</param>
            <param name="offset">The offset to start writing the data at</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedList.LengthInBytes">
            <summary>
            Returns the size of the list in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.BEncoding.BEncodedNumber">
            <summary>
            Class representing a BEncoded number
            </summary>
        </member>
        <member name="P:MonoTorrent.BEncoding.BEncodedNumber.Number">
            <summary>
            The value of the BEncodedNumber
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedNumber.#ctor(System.Int64)">
            <summary>
            Create a new BEncoded number with the given value
            </summary>
            <param name="value">The value of the BEncodedNumber</param>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedNumber.Encode(System.Byte[],System.Int32)">
            <summary>
            Encodes this number to the supplied byte[] starting at the supplied offset
            </summary>
            <param name="buffer">The buffer to write the data to</param>
            <param name="offset">The offset to start writing the data at</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedNumber.LengthInBytes">
            <summary>
            Returns the length of the encoded string in bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedNumber.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedNumber.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedNumber.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.BEncoding.BEncodedString">
            <summary>
            Class representing a BEncoded string
            </summary>
        </member>
        <member name="P:MonoTorrent.BEncoding.BEncodedString.Text">
            <summary>
            The value of the BEncodedString interpreted as a UTF-8 string. If the underlying bytes
            cannot be represented in UTF-8 then the invalid byte sequence is silently discarded.
            </summary>
        </member>
        <member name="P:MonoTorrent.BEncoding.BEncodedString.TextBytes">
            <summary>
            The underlying byte[] associated with this BEncodedString
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedString.#ctor">
            <summary>
            Create a new BEncodedString using UTF8 encoding
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedString.#ctor(System.Char[])">
            <summary>
            Create a new BEncodedString using UTF8 encoding
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedString.#ctor(System.String)">
            <summary>
            Create a new BEncodedString using UTF8 encoding
            </summary>
            <param name="value">Initial value for the string</param>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedString.#ctor(System.Byte[])">
            <summary>
            Create a new BEncodedString using UTF8 encoding
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedString.Encode(System.Byte[],System.Int32)">
            <summary>
            Encodes the BEncodedString to a byte[] using the supplied Encoding
            </summary>
            <param name="buffer">The buffer to encode the string to</param>
            <param name="offset">The offset at which to save the data to</param>
            <returns>The number of bytes encoded</returns>
        </member>
        <member name="T:MonoTorrent.BEncoding.BEncodedValue">
            <summary>
            Base interface for all BEncoded values.
            </summary>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Encode">
            <summary>
            Encodes the BEncodedValue into a byte array
            </summary>
            <returns>Byte array containing the BEncoded Data</returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Encode(System.Byte[],System.Int32)">
            <summary>
            Encodes the BEncodedValue into the supplied buffer
            </summary>
            <param name="buffer">The buffer to encode the information to</param>
            <param name="offset">The offset in the buffer to start writing the data</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode(System.Byte[])">
            <summary>
            Interface for all BEncoded values
            </summary>
            <param name="data">The byte array containing the BEncoded data</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decode BEncoded data in the given byte array
            </summary>
            <param name="buffer">The byte array containing the BEncoded data</param>
            <param name="offset">The offset at which the data starts at</param>
            <param name="length">The number of bytes to be decoded</param>
            <returns>BEncodedValue containing the data that was in the byte[]</returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode(System.IO.Stream)">
            <summary>
            Decode BEncoded data in the given stream 
            </summary>
            <param name="stream">The stream containing the BEncoded data</param>
            <returns>BEncodedValue containing the data that was in the stream</returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode(MonoTorrent.BEncoding.RawReader)">
            <summary>
            Decode BEncoded data in the given RawReader
            </summary>
            <param name="reader">The RawReader containing the BEncoded data</param>
            <returns>BEncodedValue containing the data that was in the stream</returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode``1(System.Byte[])">
            <summary>
            Interface for all BEncoded values
            </summary>
            <param name="data">The byte array containing the BEncoded data</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decode BEncoded data in the given byte array
            </summary>
            <param name="buffer">The byte array containing the BEncoded data</param>
            <param name="offset">The offset at which the data starts at</param>
            <param name="length">The number of bytes to be decoded</param>
            <returns>BEncodedValue containing the data that was in the byte[]</returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.Decode``1(System.IO.Stream)">
            <summary>
            Decode BEncoded data in the given stream 
            </summary>
            <param name="stream">The stream containing the BEncoded data</param>
            <returns>BEncodedValue containing the data that was in the stream</returns>
        </member>
        <member name="M:MonoTorrent.BEncoding.BEncodedValue.LengthInBytes">
            <summary>
            Returns the size of the byte[] needed to encode this BEncodedValue
            </summary>
            <returns></returns>
        </member>
        <member name="F:MonoTorrent.Client.Connections.SocketConnection.bufferCache">
            <summary>
            This stores a reusable 'SocketAsyncEventArgs' for every byte[] owned by ClientEngine.BufferPool
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.Connections.SocketConnection.otherCache">
            <summary>
            This stores reusable 'SocketAsyncEventArgs' for arbitrary byte[], or for when we are connecting
            to a peer and do not have a byte[] buffer to send/receive from.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Connections.SocketConnection.GetSocketAsyncEventArgs(System.Byte[])">
            <summary>
            Where possible we will use a SocketAsyncEventArgs object which has already had
            'SetBuffer(byte[],int,int)' invoked on it for the given byte[]. Reusing these is
            much more efficient than constantly calling SetBuffer on a different 'SocketAsyncEventArgs'
            object.
            </summary>
            <param name="buffer">The buffer we wish to get the reusuable 'SocketAsyncEventArgs' for</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.Create(System.Int32)">
            <summary>
            Creates a PeerID with a null TorrentManager and IConnection2. This is used for unit testing purposes.
            The peer will have <see cref="P:MonoTorrent.Client.PeerId.ProcessingQueue"/>, <see cref="P:MonoTorrent.Client.PeerId.IsChoking"/> and <see cref="P:MonoTorrent.Client.PeerId.AmChoking"/>
            set to true. A bitfield with all pieces set to <see langword="false"/> will be created too.
            </summary>
            <param name="bitfieldLength"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.CreateNull(System.Int32)">
            <summary>
            Creates a PeerID with a null TorrentManager and IConnection2. This is used for unit testing purposes.
            The peer will have <see cref="P:MonoTorrent.Client.PeerId.ProcessingQueue"/>, <see cref="P:MonoTorrent.Client.PeerId.IsChoking"/> and <see cref="P:MonoTorrent.Client.PeerId.AmChoking"/>
            set to true. A bitfield with all pieces set to <see langword="false"/> will be created too.
            </summary>
            <param name="bitfieldLength"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.CreateNull(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a PeerID with a null TorrentManager and IConnection2. This is used for unit testing purposes.
            The peer will have <see cref="P:MonoTorrent.Client.PeerId.ProcessingQueue"/>, <see cref="P:MonoTorrent.Client.PeerId.IsChoking"/> and <see cref="P:MonoTorrent.Client.PeerId.AmChoking"/>
            set to true. A bitfield with all pieces set to <see langword="false"/> will be created too.
            </summary>
            <param name="bitfieldLength"></param>
            <param name="seeder">True if the returned peer should be treated as a seeder (the bitfield will have all pieces set to 'true')</param>
            <param name="isChoking"></param>
            <param name="amInterested"></param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.PeerId.AmAllowedFastPieces">
            <summary>
            The remote peer can request these and we'll fulfill the request if we're choking them
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerId.IsAllowedFastPieces">
            <summary>
            This is the set of pieces we can request while choked.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerId.UploadRateForRecip">
            <summary>
            This is Up
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerId.EstimatedDownloadRate">
            <summary>
            TGS CHANGE: Get the estimated download rate of this peer based on the rate at which he sends
            us Have messages. Note that this could be false if the peer has a malicious client.
            Units: Bytes/s
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerId.Ratio">
            <summary>
            This is the ratio of Dp to Up
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.PeerId.LastChokedTime">
            <summary>
            Last time we looked that this peer was choking us
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.GetDownloadRate">
            <summary>
            Get our download rate from this peer -- this is Dp.
            
            1. If we are not choked by this peer, return the actual measure download rate.
            2. If we are choked, then attempt to make an educated guess at the download rate using the following steps
                - use the rate of Have messages received from this peer as an estimate of its download rate
                - assume that its upload rate is equivalent to its estimated download rate
                - divide this upload rate by the standard implementation's active set size for that rate
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.UpdateTyrantStats">
            <summary>
            Should be called by ChokeUnchokeManager.ExecuteReview
            Logic taken from BitTyrant implementation
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.IsUnderUploadLimit">
            <summary>
            Compares the actual upload rate with the upload rate that we are supposed to be limiting them to (UploadRateForRecip)
            </summary>
            <returns>True if the upload rate for recip is greater than the actual upload rate</returns>
        </member>
        <member name="M:MonoTorrent.Client.PeerId.GetActiveSetSize(System.Int32)">
            <summary>
            Stolen from reference BitTyrant implementation (see org.gudy.azureus2.core3.peer.TyrantStats)
            </summary>
            <param name="uploadRate">Upload rate of peer</param>
            <returns>Estimated active set size of peer</returns>
        </member>
        <member name="T:MonoTorrent.Client.Encryption.EncryptedSocket">
            <summary>
            The class that handles.Message Stream Encryption for a connection
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.HandshakeAsync(MonoTorrent.Client.Connections.IConnection2)">
            <summary>
            Begins the message stream encryption handshaking process
            </summary>
            <param name="socket">The socket to perform handshaking with</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.HandshakeAsync(MonoTorrent.Client.Connections.IConnection2,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Begins the message stream encryption handshaking process, beginning with some data
            already received from the socket.
            </summary>
            <param name="socket">The socket to perform handshaking with</param>
            <param name="initialBuffer">Buffer containing soome data already received from the socket</param>
            <param name="offset">Offset to begin reading in initialBuffer</param>
            <param name="count">Number of bytes to read from initialBuffer</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts some data (should only be called after onEncryptorReady)
            </summary>
            <param name="data">Buffer with the data to encrypt</param>
            <param name="offset">Offset to begin encryption</param>
            <param name="length">Number of bytes to encrypt</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts some data (should only be called after onEncryptorReady)
            </summary>
            <param name="data">Buffer with the data to decrypt</param>
            <param name="offset">Offset to begin decryption</param>
            <param name="length">Number of bytes to decrypt</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.SendY">
            <summary>
            Send Y to the remote client, with a random padding that is 0 to 512 bytes long
            (Either "1 A->B: Diffie Hellman Ya, PadA" or "2 B->A: Diffie Hellman Yb, PadB")
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.ReceiveY">
            <summary>
            Receive the first 768 bits of the transmission from the remote client, which is Y in the protocol
            (Either "1 A->B: Diffie Hellman Ya, PadA" or "2 B->A: Diffie Hellman Yb, PadB")
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.Synchronize(System.Byte[],System.Int32)">
            <summary>
            Read data from the socket until the byte string in syncData is read, or until syncStopPoint
            is reached (in that case, there is an EncryptionError).
            (Either "3 A->B: HASH('req1', S)" or "4 B->A: ENCRYPT(VC)")
            </summary>
            <param name="syncData">Buffer with the data to synchronize to</param>
            <param name="syncStopPoint">Maximum number of bytes (measured from the total received from the socket since connection) to read before giving up</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.CreateCryptors(System.Byte[],System.Byte[])">
            <summary>
            Instantiate the cryptors with the keys: Hash(encryptionSalt, S, SKEY) for the encryptor and
            Hash(encryptionSalt, S, SKEY) for the decryptor.
            (encryptionSalt should be "keyA" if you're A, "keyB" if you're B, and reverse for decryptionSalt)
            </summary>
            <param name="encryptionSalt">The salt to calculate the encryption key with</param>
            <param name="decryptionSalt">The salt to calculate the decryption key with</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.SelectCrypto(System.Byte[],System.Boolean)">
            <summary>
            Sets CryptoSelect and initializes the stream encryptor and decryptor based on the selected method.
            </summary>
            <param name="remoteCryptoBytes">The cryptographic methods supported/wanted by the remote client in CryptoProvide format. The highest order one available will be selected</param>
            <param name="replace">True if the existing Encryptor/Decryptor object should be replaced with a new instance</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.Combine(System.Byte[][])">
            <summary>
            Concatenates several byte buffers
            </summary>
            <param name="data">Buffers to concatenate</param>
            <returns>Resulting concatenated buffer</returns>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.Hash(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Hash some data with SHA1
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
            <returns>20-byte hash</returns>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.DeLen(System.Byte[])">
            <summary>
            Converts a 2-byte big endian integer into an int (reverses operation of Len())
            </summary>
            <param name="data">2 byte buffer</param>
            <returns>int</returns>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.Len(System.Byte[])">
            <summary>
            Returns a 2-byte buffer with the length of data
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.GeneratePad">
            <summary>
            Returns a 0 to 512 byte 0-filled pad.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.DoEncrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts some data with the RC4 encryptor used in handshaking
            </summary>
            <param name="data">Buffer with the data to encrypt</param>
            <param name="offset">Offset to begin encryption</param>
            <param name="length">Number of bytes to encrypt</param>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.EncryptedSocket.DoDecrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts some data with the RC4 decryptor used in handshaking
            </summary>
            <param name="data">Buffer with the data to decrypt</param>
            <param name="offset">Offset to begin decryption</param>
            <param name="length">Number of bytes to decrypt</param>
        </member>
        <member name="T:MonoTorrent.Client.Encryption.ModuloCalculator">
            <summary>
            Class to facilitate the calculation of a^b mod p, where a and b are large integers
            and p is the predefined prime from message stream encryption.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Encryption.PlainTextEncryption">
            <summary>
            Plaintext "encryption"
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Encryption.PeerAEncryption">
            <summary>
            Class to handle message stream encryption for initiating connections
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Encryption.PeerBEncryption">
            <summary>
            Class to handle message stream encryption for receiving connections
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Encryption.PeerBEncryption.MatchSKEY(System.Byte[])">
            <summary>
            Matches a torrent based on whether the HASH('req2', SKEY) xor HASH('req3', S) matches, where SKEY is the InfoHash of the torrent
            and sets the SKEY to the InfoHash of the matched torrent.
            </summary>
            <returns>true if a match has been found</returns>
        </member>
        <member name="T:MonoTorrent.Client.Encryption.RC4">
            <summary>
            RC4 encryption
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.EncryptionTypes.None">
            <summary>
            <see cref="P:MonoTorrent.Client.Peer.AllowedEncryption"/> is initially set to <see cref="F:MonoTorrent.Client.EncryptionTypes.All"/>. If a
            connection cannot be established using a given method that method is removed from
            the list. If every method fails then the peer will be set to <see cref="F:MonoTorrent.Client.EncryptionTypes.None"/>
            and no further connections will be attempted. By setting <see cref="F:MonoTorrent.Client.EncryptionTypes.None"/> then
            encrypted and unencrypted connections are both disallowed.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.EncryptionTypes.PlainText">
            <summary>
            Nothing is encrypted. This is the fastest but allows deep packet inspection to detect
            the bittorrent handshake. If connections are being closed before the handshake completes,
            or very soon after it completes, then it's possible that the ISP is closing them, and so
            RC4 based methods may prevent that from happening.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.EncryptionTypes.RC4Header">
            <summary>
            Encryption is applied to the initial handshaking process only. Once the connection has
            been established all further data is sent in plain text. This is the second fastest
            and should prevent deep packet inspection from detecting the bittorrent handshake.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.EncryptionTypes.RC4Full">
            <summary>
            Encryption is applied to the initial handshake and to all subsequent data transfers.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.EncryptionTypes.All">
            <summary>
            Both encrypted and unencrypted connections are allowed.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Listeners.PeerListener">
            <summary>
            Accepts incoming connections and passes them off to the right TorrentManager
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Listeners.PeerListenerFactory.CreateTcp(System.Int32)">
            <summary>
            Creates a listener which binds to IPAddress.Any and listens for incoming TCP requests on the given local port.
            </summary>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.Listeners.PeerListenerFactory.CreateTcp(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a listener which listens for incoming TCP requests on the given local IP address and port.
            </summary>
            <param name="address">The local IP address to bind to.</param>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.Listeners.PeerListenerFactory.CreateTcp(System.Net.IPEndPoint)">
            <summary>
            Creates a listener which listens for incoming TCP requests on the given local IP address and port.
            </summary>
            <param name="endpoint">The local endpoint to bind to.</param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.Messages.FastPeer.RejectRequestMessage.StartOffset">
            <summary>
            The offset in bytes of the block of data
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.FastPeer.RejectRequestMessage.PieceIndex">
            <summary>
            The index of the piece
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.FastPeer.RejectRequestMessage.RequestLength">
            <summary>
            The length of the block of data
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.FastPeer.SuggestPieceMessage.PieceIndex">
            <summary>
            The index of the suggested piece to request
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.FastPeer.SuggestPieceMessage.#ctor">
            <summary>
            Creates a new SuggestPiece message
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.FastPeer.SuggestPieceMessage.#ctor(System.Int32)">
            <summary>
            Creates a new SuggestPiece message
            </summary>
            <param name="pieceIndex">The suggested piece to download</param>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Libtorrent.ExtendedHandshakeMessage.MaxRequests">
            <summary>
            The maximum number of concurrent 16kB <see cref="T:MonoTorrent.Client.Messages.Standard.RequestMessage"/>s which can be sent to this peer. Defaults to <see cref="F:MonoTorrent.Client.ClientEngine.DefaultMaxPendingRequests"/> requests.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.BitfieldMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.BitfieldMessage.BitField">
            <summary>
            The bitfield
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.BitfieldMessage.#ctor(System.Int32)">
            <summary>
            Creates a new BitfieldMessage
            </summary>
            <param name="length">The length of the bitfield</param>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.BitfieldMessage.#ctor(MonoTorrent.BitField)">
            <summary>
            Creates a new BitfieldMessage
            </summary>
            <param name="bitfield">The bitfield to use</param>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.BitfieldMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.BitfieldMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.CancelMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.CancelMessage.PieceIndex">
            <summary>
            The index of the piece
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.CancelMessage.StartOffset">
            <summary>
            The offset in bytes of the block of data
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.CancelMessage.RequestLength">
            <summary>
            The length in bytes of the block of data
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.CancelMessage.#ctor">
            <summary>
            Creates a new CancelMessage
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.CancelMessage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new CancelMessage
            </summary>
            <param name="pieceIndex">The index of the piece to cancel</param>
            <param name="startOffset">The offset in bytes of the block of data to cancel</param>
            <param name="requestLength">The length in bytes of the block of data to cancel</param>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.CancelMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.CancelMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.ChokeMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.ChokeMessage.#ctor">
            <summary>
            Creates a new ChokeMessage
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.ChokeMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.ChokeMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.HandshakeMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HandshakeMessage.ProtocolStringLength">
            <summary>
            The length of the protocol string
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HandshakeMessage.ProtocolString">
            <summary>
            The protocol string to send
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HandshakeMessage.InfoHash">
            <summary>
            The infohash of the torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HandshakeMessage.PeerId">
            <summary>
            The ID of the peer (20 bytes).
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HandshakeMessage.SupportsExtendedMessaging">
            <summary>
            True if the peer supports LibTorrent extended messaging.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HandshakeMessage.SupportsFastPeer">
            <summary>
            True if the peer supports the Bittorrent FastPeerExtensions.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.HandshakeMessage.#ctor(System.Boolean)">
            <summary>
            Creates a new HandshakeMessage
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.HandshakeMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.HaveMessage">
            <summary>
            Represents a "Have" message
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HaveMessage.PieceIndex">
            <summary>
            The index of the piece that you "have"
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.HaveMessage.#ctor">
            <summary>
            Creates a new HaveMessage
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.HaveMessage.#ctor(System.Int32)">
            <summary>
            Creates a new HaveMessage
            </summary>
            <param name="pieceIndex">The index of the piece that you "have"</param>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.HaveMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.HaveMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.InterestedMessage">
            <summary>
            Represents an "Interested" message
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.InterestedMessage.#ctor">
            <summary>
            Creates a new InterestedMessage
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.InterestedMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.InterestedMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.KeepAliveMessage">
            <summary>
            Represents a "KeepAlive" message
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.KeepAliveMessage.#ctor">
            <summary>
            Creates a new KeepAliveMessage
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.KeepAliveMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.KeepAliveMessage.ToString">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.NotInterestedMessage">
            <summary>
            Represents a "NotInterested" message
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.NotInterestedMessage.#ctor">
            <summary>
            Creates a new NotInterestedMessage
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.NotInterestedMessage.ByteLength">
            <summary>
            Returns the length of the message in bytes
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Messages.Standard.NotInterestedMessage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.PieceMessage.Data">
            <summary>
            The data associated with this block
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.PieceMessage.BlockIndex">
            <summary>
            The index of the block from the piece which was requested.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.PieceMessage.ByteLength">
            <summary>
            The length of the message in bytes
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.PieceMessage.PieceIndex">
            <summary>
            The index of the piece which was requested
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.PieceMessage.StartOffset">
            <summary>
            The byte offset of the block which was requested
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Messages.Standard.PieceMessage.RequestLength">
            <summary>
            The length of the block which was requested
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Messages.Standard.PortMessage">
            <summary>
            Represents a "Port" message
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.PiecePicking.EndGameSwitcher.Threshold">
            <summary>
            Allow entering endgame mode if there are fewer than 256 blocks outstanding.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.PiecePicking.SlidingWindowPicker">
            <summary>
            Generates a sliding window with high, medium, and low priority sets. The high priority set is downloaded first and in order.
            The medium and low priority sets are downloaded rarest first.
            
            This is intended to be used with a BitTorrent streaming application.
            
            The high priority set represents pieces that are needed SOON. This set is updated by calling code, to adapt for events
            (e.g. user fast-forwards or seeks, etc.)
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.HighPrioritySetStart">
            <summary>
            Gets or sets first "high priority" piece. The n pieces after this will be requested in-order,
            the rest of the file will be treated rarest-first
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.HighPrioritySetSize">
            <summary>
            Gets or sets the size, in pieces, of the high priority set.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.MediumToHighRatio">
            <summary>
            This is the size ratio between the medium and high priority sets. Equivalent to mu in Tribler's Give-to-get paper.
            Default value is 4.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.MediumPrioritySetSize">
            <summary>
            Read-only value for size of the medium priority set. To set the medium priority size, use MediumToHighRatio.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.#ctor(MonoTorrent.Client.PiecePicking.PiecePicker)">
            <summary>
            Empty constructor for changing piece pickers
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.#ctor(MonoTorrent.Client.PiecePicking.PiecePicker,System.Int32)">
            <summary>
            Creates a new piece picker with support for prioritization of files. The sliding window will be positioned to the start
            of the first file to be downloaded
            </summary>
            <param name="picker">The picker which requests should be forwarded to</param>
            <param name="highPrioritySetSize">Size of high priority set</param>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.#ctor(MonoTorrent.Client.PiecePicking.PiecePicker,System.Int32,System.Int32)">
            <summary>
            Create a new SlidingWindowPicker with the given set sizes. The sliding window will be positioned to the start
            of the first file to be downloaded
            </summary>
            <param name="picker">The picker which requests should be forwarded to</param>
            <param name="highPrioritySetSize">Size of high priority set</param>
            <param name="mediumToHighRatio">Size of medium priority set as a multiple of the high priority set size</param>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.SlidingWindowPicker.Initialise(MonoTorrent.BitField,MonoTorrent.ITorrentData,System.Collections.Generic.IEnumerable{MonoTorrent.Client.Piece})">
            <summary>
            
            </summary>
            <param name="bitfield"></param>
            <param name="torrentData"></param>
            <param name="requests"></param>
        </member>
        <member name="T:MonoTorrent.Client.PiecePicking.StreamingPiecePicker">
            <summary>
            This implementation of PiecePicker downloads pieces in a linear fashion until
            sufficient data has been buffered, then it moves to a standard 'rarest first'
            mode.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PiecePicking.StreamingPiecePicker.HighPriorityPieceIndex">
            <summary>
            This is the piece index of the block of data currently being consumed by the
            media player or other program.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PiecePicking.StreamingPiecePicker.HighPriorityCount">
            <summary>
            The number of pieces which will be kept buffered to avoid stuttering while streaming media.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.StreamingPiecePicker.#ctor(MonoTorrent.Client.PiecePicking.PiecePicker)">
            <summary>
            Empty constructor for changing piece pickers
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.StreamingPiecePicker.SeekToPosition(MonoTorrent.TorrentFile,System.Int64)">
            <summary>
            Cancel any pending requests and then issue new requests so we immediately download pieces from the new high
            priority set.
            </summary>
            <param name="file"></param>
            <param name="position"></param>
        </member>
        <member name="M:MonoTorrent.Client.PiecePicking.StreamingPiecePicker.ReadToPosition(MonoTorrent.TorrentFile,System.Int64)">
            <summary>
            Inform the picker that we have sequentially read data and so will need to update the high priority set without
            cancelling pending requests.
            </summary>
            <param name="file"></param>
            <param name="position"></param>
        </member>
        <member name="P:MonoTorrent.Client.PieceWriters.MemoryWriter.CacheHits">
            <summary>
            The number of bytes which were read from the cache when fulfilling a Read request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceWriters.MemoryWriter.CacheMisses">
            <summary>
            The number of bytes which could not be read from the cache when fulfilling a Read request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceWriters.MemoryWriter.CacheUsed">
            <summary>
            The number of bytes currently used by the cache.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceWriters.MemoryWriter.CachedBlocks">
            <summary>
            The blocks which have been cached in memory
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceWriters.MemoryWriter.Capacity">
            <summary>
            The size of the in memory cache, in bytes.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PortForwarding.IPortForwarder.Active">
            <summary>
            True if the port forwarding is enabled
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PortForwarding.IPortForwarder.Mappings">
            <summary>
            The list of mappings which have been registered. If the mapping was successfully established it will
            be in the <see cref="P:MonoTorrent.Client.PortForwarding.Mappings.Created"/> list. If an error occurred creating the mapping it will be
            in the <see cref="P:MonoTorrent.Client.PortForwarding.Mappings.Failed"/> list, otherwise it will be in the <see cref="P:MonoTorrent.Client.PortForwarding.Mappings.Pending"/>
            list.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PortForwarding.IPortForwarder.RegisterMappingAsync(MonoTorrent.Client.PortForwarding.Mapping)">
            <summary>
            Forwards a port on a NAT-PMP or uPnP capable router.
            </summary>
            <param name="mapping">The mapping to try and create.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PortForwarding.IPortForwarder.UnregisterMappingAsync(MonoTorrent.Client.PortForwarding.Mapping,System.Threading.CancellationToken)">
            <summary>
            Removes a port forwarding mapping from the router.
            </summary>
            <param name="mapping">The mapping to remove from the router. to use for the external and internal port number.</param>
            <param name="token">If the token is cancelled then the port map may not be fully removed from the router.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PortForwarding.IPortForwarder.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Begins searching for any compatible port forwarding devices. Refreshes any forwarded ports automatically
            before the mapping expires.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PortForwarding.IPortForwarder.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Removes any port map requests and stops searching for compatible port forwarding devices. Cancels any pending
            ForwardPort requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.PortForwarding.IPortForwarder.StopAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes any port map requests and stops searching for compatible port forwarding devices. Cancels any pending
            ForwardPort requests.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.PortForwarding.Mappings.Created">
            <summary>
            A list of mappings which have been successfully created
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PortForwarding.Mappings.Pending">
            <summary>
            A list of mappings which will be created as soon as a compatible uPnP or NAT-PMP router
            is discovered.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PortForwarding.Mappings.Failed">
            <summary>
            A list of mappings which could not be created. This can happen if the public port is already
            in use and is mapped to a different IP address in the local network.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerResponseEventArgs.Successful">
            <summary>
            True if the request completed successfully
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerResponseEventArgs.Tracker">
            <summary>
            If the request completed successfull this will be set to the tracker which sent the valid response.
            If the request was unsuccessful, then this will be null for Announce requests (as every Tracker is queried),
            and it will be non-null for Scrape requests as only a single tracker is scraped.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.ITrackerManager.CurrentTracker">
            <summary>
            Returns the ITracker which mostly recently responded to an Announce or Scrape request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.ITrackerManager.LastAnnounceSucceeded">
            <summary>
            True if the most recent Announce request was successful.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.ITrackerManager.LastUpdated">
            <summary>
            The time, in UTC, when the most recent Announce request was sent
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.ITrackerManager.Tiers">
            <summary>
            The available trackers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.ITrackerManager.TimeSinceLastAnnounce">
            <summary>
            The amount of time which has passed since the most recent Announce request was sent.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Tracker.ITrackerManager.Announce">
            <summary>
            Sends an announce request to each tierSend an Announce request to the <see cref="P:MonoTorrent.Client.Tracker.ITrackerManager.CurrentTracker"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.Tracker.ITrackerManager.Announce(MonoTorrent.TorrentEvent)">
            <summary>
            Send an Announce request to the <see cref="P:MonoTorrent.Client.Tracker.ITrackerManager.CurrentTracker"/>, with the
            specified <see cref="T:MonoTorrent.TorrentEvent"/>.
            </summary>
            <param name="clientEvent">The event, if any, associated with this Announce request. If the torrent has just started
            then <see cref="F:MonoTorrent.TorrentEvent.Started"/>) is sent. If it was just stopped then (<see cref="F:MonoTorrent.TorrentEvent.Stopped"/> is sent.
            If it just reached 100% completion then <see cref="F:MonoTorrent.TorrentEvent.Completed"/> is sent, otherwise
            <see cref="F:MonoTorrent.TorrentEvent.None"/> should be sent.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.Tracker.ITrackerManager.Announce(MonoTorrent.Client.Tracker.ITracker)">
            <summary>
            Send an Announce request to the specified tracker.
            </summary>
            <param name="tracker">The tracker to query</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.Tracker.ITrackerManager.Scrape">
            <summary>
            Send a Scrape request to the <see cref="P:MonoTorrent.Client.Tracker.ITrackerManager.CurrentTracker"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.Tracker.ITrackerManager.Scrape(MonoTorrent.Client.Tracker.ITracker)">
            <summary>
            Send a Scrape request to the specified tracker.
            </summary>
            <param name="tracker">The tracker to query</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.Tracker.TrackerManager">
            <summary>
            Represents the connection to a tracker that an TorrentManager has
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerManager.CurrentTracker">
            <summary>
            Returns the tracker which will be used, by default, for Announce or Scrape requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerManager.LastAnnounceSucceeded">
            <summary>
            True if the most recent Announce request was successful.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerManager.LastUpdated">
            <summary>
            The time, in UTC, when the most recent Announce request was sent
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerManager.RequestFactory">
            <summary>
            The TorrentManager associated with this tracker
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerManager.Tiers">
            <summary>
            The available trackers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Tracker.TrackerManager.TimeSinceLastAnnounce">
            <summary>
            The amount of time since the most recent Announce request was issued.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.Tracker.TrackerManager.#ctor(MonoTorrent.Client.Tracker.ITrackerRequestFactory,System.Collections.Generic.IEnumerable{MonoTorrent.RawTrackerTier})">
            <summary>
            Creates a new TrackerConnection for the supplied torrent file
            </summary>
            <param name="requestFactory">The factory used to create tracker requests. Typically a <see cref="T:MonoTorrent.Client.TorrentManager"/> instance.</param>
            <param name="announces">The list of tracker tiers</param>
        </member>
        <member name="F:MonoTorrent.Client.Tracker.TrackerState.Unknown">
            <summary>
            A request has not been sent yet.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.Tracker.TrackerState.Connecting">
            <summary>
            Currently sending a request.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.Tracker.TrackerState.Ok">
            <summary>
            The most recent request completed successfully.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.Tracker.TrackerState.Offline">
            <summary>
            The tracker was unreachable/offline.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.Tracker.TrackerState.InvalidResponse">
            <summary>
            The tracker was reachable but the response it sent was invalid.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.Block">
             <summary>
            
             </summary>
        </member>
        <member name="T:MonoTorrent.Client.ClientEngine">
            <summary>
            包含TorrentManager的引擎
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ClientEngine.PeerIdRandomGenerator">
            <summary>
            An un-seeded random number generator which will not generate the same
            random sequence when the application is restarted.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ClientEngine.publicTorrents">
            <summary>
            The <see cref="T:MonoTorrent.Client.TorrentManager"/> instances registered by the user.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ClientEngine.allTorrents">
            <summary>
            The <see cref="T:MonoTorrent.Client.TorrentManager"/> instances registered by the user and the instances
            implicitly created by <see cref="M:MonoTorrent.Client.ClientEngine.DownloadMetadataAsync(MonoTorrent.MagnetLink,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ClientEngine.PortForwardingEnabled">
            <summary>
            Returns true when <see cref="M:MonoTorrent.Client.ClientEngine.EnablePortForwardingAsync(System.Threading.CancellationToken)"/> is invoked. When enabled, the
            engine will automatically forward ports using uPnP and/or NAT-PMP compatible routers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ClientEngine.PortMappings">
            <summary>
            When <see cref="P:MonoTorrent.Client.ClientEngine.PortForwardingEnabled"/> is set to true, this will return a representation
            of the ports the engine is managing.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.#ctor(MonoTorrent.Client.EngineSettings)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.#ctor(MonoTorrent.Client.EngineSettings,MonoTorrent.Client.PieceWriters.IPieceWriter)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="writer"></param>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.#ctor(MonoTorrent.Client.EngineSettings,MonoTorrent.Client.Listeners.IPeerListener)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="listener"></param>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.#ctor(MonoTorrent.Client.EngineSettings,MonoTorrent.Client.Listeners.IPeerListener,MonoTorrent.Client.PieceWriters.IPieceWriter)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="listener"></param>
            <param name="writer"></param>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.DownloadMetadataAsync(MonoTorrent.MagnetLink,System.Threading.CancellationToken)">
            <summary>
            下载磁力链接对应的.torrent元数据
            </summary>
            <param name="magnetLink">The MagnetLink to get the metadata for.</param>
            <param name="token">The cancellation token used to to abort the download. This method will
            only complete if the metadata successfully downloads, or the token is cancelled.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.StopAllAsync">
            <summary>
            Stops all active <see cref="T:MonoTorrent.Client.TorrentManager"/> instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.StopAllAsync(System.TimeSpan)">
            <summary>
            Stops all active <see cref="T:MonoTorrent.Client.TorrentManager"/> instances. The final announce for each <see cref="T:MonoTorrent.Client.TorrentManager"/> will be limited
            to the maximum of either 2 seconds or <paramref name="timeout"/> seconds.
            </summary>
            <param name="timeout">The timeout for the final tracker announce.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.EnablePortForwardingAsync(System.Threading.CancellationToken)">
            <summary>
            Sets <see cref="P:MonoTorrent.Client.ClientEngine.PortForwardingEnabled"/> to true and begins searching for uPnP or
            NAT-PMP compatible devices. If any are discovered they will be used to forward the
            ports used by the engine.
            </summary>
            <param name="token">If the token is cancelled and an <see cref="T:System.OperationCanceledException"/>
            is thrown then the engine is guaranteed to not be searching for compatible devices.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.ClientEngine.DisablePortForwardingAsync(System.Threading.CancellationToken)">
            <summary>
            Sets <see cref="P:MonoTorrent.Client.ClientEngine.PortForwardingEnabled"/> to false and the engine will no longer
            seach for uPnP or NAT-PMP compatible devices. Ports forwarding requests will
            be deleted, where possible.
            </summary>
            <param name="token">If the token is cancelled the engine is guaranteed to no longer search
            for compatible devices, but existing port forwarding requests may not be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Client.ConnectionFailureReason">
            <summary>
            Lists potential reasons why an outgoing connection could not be established.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ConnectionFailureReason.Unreachable">
            <summary>
            The remote peer did not accept the connection. This might mean the client has gone
            offline or the client is behind a NAT/Firewall and cannot accept incoming connections.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ConnectionFailureReason.EncryptionNegiotiationFailed">
            <summary>
            After accepting the connection, a compatible connection encryption method could not
            be selected. Alternatively the remote peer could have reached it's open connection
            limit and simply closed the connection, or it could mean the peer did not support
            encrypted connections.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ConnectionFailureReason.HandshakeFailed">
            <summary>
            A compatible connection encryption method was selected, but the peer closed the
            connection after the normal handshake was sent. This could mean the remote peer
            reached it's open connection limit and simply closed the connection, or it could
            mean the peer did not actually support the chosen encryption. This can happen
            if we choose to create an unencrypted outgoing connection and the peer only
            supports encrypted connections.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.ConnectionFailureReason.Unknown">
            <summary>
            There is no clear reason why the connection attempt failed.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.BlockEventArgs.Block">
            <summary>
            The block whose state changed
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.BlockEventArgs.Piece">
            <summary>
            The piece that the block belongs too
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.BlockEventArgs.ID">
            <summary>
            The peer who the block has been requested off
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.BlockEventArgs.#ctor(MonoTorrent.Client.TorrentManager,MonoTorrent.Client.Block,MonoTorrent.Client.Piece,MonoTorrent.Client.PeerId)">
            <summary>
            Creates a new BlockEventArgs
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.DhtPeersAdded">
            <summary>
            Indicates peers were received using DHT
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.LocalPeersAdded">
            <summary>
            Indicates peers were received from Local Peer Discovery
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.PeerAddedEventArgs">
            <summary>
            Provides the data needed to handle a PeersAdded event
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerAddedEventArgs.Peer">
            <summary>
            The number of peers that were added in the last update
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PeerAddedEventArgs.#ctor(MonoTorrent.Client.TorrentManager,MonoTorrent.Client.Peer)">
            <summary>
            Creates a new PeersAddedEventArgs
            </summary>
            <param name="manager">The <see cref="T:MonoTorrent.Client.TorrentManager"/> which the peer was added to.</param>
            <param name="peerAdded">The peer which was added.</param>
        </member>
        <member name="T:MonoTorrent.Client.ConnectionAttemptFailedEventArgs">
            <summary>
            Used by the <see cref="E:MonoTorrent.Client.TorrentManager.ConnectionAttemptFailed"/> event
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ConnectionAttemptFailedEventArgs.Reason">
            <summary>
            This is a guess about why the engine failed to establish an outgoing connection.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ConnectionAttemptFailedEventArgs.Peer">
            <summary>
            The peer which could not be connected to.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.PeerExchangePeersAdded">
            <summary>
            Indicates peers were received using Peer Exchange
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerExchangePeersAdded.Id">
            <summary>
            The peer who provided the list of additional peers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeersAddedEventArgs.ExistingPeers">
            <summary>
            The number of peers which were already known.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeersAddedEventArgs.NewPeers">
            <summary>
            The number of new peers which were added.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PeersAddedEventArgs.#ctor(MonoTorrent.Client.TorrentManager,System.Int32,System.Int32)">
            <summary>
            Creates a new PeersAddedEventArgs
            </summary>
            <param name="manager">The <see cref="T:MonoTorrent.Client.TorrentManager"/> which peers were discovered for.</param>
            <param name="peersAdded">The number of peers just added. This will be less than <paramref name="total"/> if some peers are duplicates.</param>
            <param name="total">The total number of peers discovered, including duplicates.</param>
        </member>
        <member name="T:MonoTorrent.Client.PieceHashedEventArgs">
            <summary>
            Provides the data needed to handle a PieceHashed event
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceHashedEventArgs.PieceIndex">
            <summary>
            The index of the piece which was hashed
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceHashedEventArgs.HashPassed">
            <summary>
            The value of whether the piece passed or failed the hash check
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PieceHashedEventArgs.Progress">
            <summary>
            If the TorrentManager is in the hashing state then this returns a value between 0 and 1 indicating
            how complete the hashing progress is. If the manager is in the Downloading state then this will
            return '1' as the torrent will have been fully hashed already. If some files in the torrent were
            marked as 'DoNotDownload' during the initial hash, and those files are later marked as downloadable,
            then this will still return '1'.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.PieceHashedEventArgs.#ctor(MonoTorrent.Client.TorrentManager,System.Int32,System.Boolean)">
            <summary>
            Creates a new PieceHashedEventArgs
            </summary>
            <param name="manager">The <see cref="T:MonoTorrent.Client.TorrentManager"/> whose piece was hashed</param>
            <param name="pieceIndex">The index of the piece that was hashed</param>
            <param name="hashPassed">True if the piece passed the hashcheck, false otherwise</param>
        </member>
        <member name="T:MonoTorrent.Client.TorrentStateChangedEventArgs">
            <summary>
            Provides the data needed to handle a TorrentStateChanged event
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentStateChangedEventArgs.OldState">
            <summary>
            The old state for the torrent
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentStateChangedEventArgs.NewState">
            <summary>
            The new state for the torrent
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.TorrentStateChangedEventArgs.#ctor(MonoTorrent.Client.TorrentManager,MonoTorrent.Client.TorrentState,MonoTorrent.Client.TorrentState)">
            <summary>
            Creates a new TorrentStateChangedEventArgs
            </summary>
            <param name="manager">The <see cref="T:MonoTorrent.Client.TorrentManager"/> whose state has changed.</param>
            <param name="oldState">The old state of the Torrent</param>
            <param name="newState">The new state of the Torrent</param>
        </member>
        <member name="T:MonoTorrent.Client.TrackerPeersAdded">
            <summary>
            Indicates peers were received from a Tracker
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.ILocalPeerDiscovery.PeerFound">
            <summary>
            This event is raised whenever a peer is discovered.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ILocalPeerDiscovery.Announce(MonoTorrent.InfoHash)">
            <summary>
            Send an announce request for this InfoHash to all available network adapters.
            </summary>
            <param name="infoHash"></param>
            <returns></returns>
        </member>
        <member name="F:MonoTorrent.Client.LocalPeerDiscovery.MulticastPort">
            <summary>
            The port used by the multicast group
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.LocalPeerDiscovery.MulticastIpAddress">
            <summary>
            The IPAddress of the multicast group.
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.LocalPeerDiscovery.Random">
            <summary>
            Used to generate a unique identifier for this client instance.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.LocalPeerDiscovery.PeerFound">
            <summary>
            This asynchronous event is raised whenever a peer is discovered.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.BaseSearchString">
            <summary>
            When we send Announce we should embed the current <see cref="P:MonoTorrent.Client.EngineSettings.ListenPort"/> as it is dynamic.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.BroadcastEndPoint">
            <summary>
            This is where announce requests should be sent.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.Cookie">
            <summary>
            A random identifier used to detect our own Announces so we can ignore them.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.PendingAnnounces">
            <summary>
            We glob together announces so that we don't iterate the network interfaces too frequently.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.ProcessingAnnounces">
            <summary>
            Set to true when we're processing the pending announce queue.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.Settings">
            <summary>
            The settings object used by the associated <see cref="T:MonoTorrent.Client.ClientEngine"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.LocalPeerDiscovery.UdpClient">
            <summary>
            The UdpClient joined to the multicast group, which is used to receive the broadcasts
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.LocalPeerDiscovery.Announce(MonoTorrent.InfoHash)">
            <summary>
            Send an announce request for this InfoHash.
            </summary>
            <param name="infoHash"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.MainLoop.SwitchToThreadpool">
            <summary>
            When <see cref="T:MonoTorrent.Client.ThreadSwitcher"/> is awaited the continuation will always be queued on
            the ThreadPool for execution. It will never execute synchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.BufferPool.#ctor">
            <summary>
            The class that controls the allocating and deallocating of all byte[] buffers used in the engine.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ChokeUnchokeManager.UnchokeReview">
            <summary>
            Executed each tick of the client engine
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ChokeUnchokeManager.ReallocateSlots(System.Int32,System.Int32)">
            <summary>
            Reallocates the specified number of upload slots
            </summary>
            <param name="NumberOfSlots">The number of slots we should reallocate</param>
            <param name="NumberOfUnchokedPeers">The number of peers which are currently unchoked.</param>
        </member>
        <member name="M:MonoTorrent.Client.ChokeUnchokeManager.ReallocateSlot(System.Int32@,System.Int32@,MonoTorrent.Client.PeerId)">
            <summary>
            Reallocates the next slot with the specified peer if we can
            </summary>
            <param name="NumberOfSlots"></param>The number of slots left to reallocate
            <param name="MaximumUnchokes"></param>The number of peers we can unchoke
            <param name="peer"></param>The peer to consider for reallocation
        </member>
        <member name="M:MonoTorrent.Client.ChokeUnchokeManager.RejectPendingRequests(MonoTorrent.Client.PeerId)">
            <summary>
            Checks the send queue of the peer to see if there are any outstanding pieces which they requested
            and rejects them as necessary
            </summary>
            <param name="Peer"></param>
        </member>
        <member name="T:MonoTorrent.Client.ConnectionManager">
            <summary>
            Main controller class for all incoming and outgoing connections
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ConnectionManager.HalfOpenConnections">
            <summary>
            The number of concurrent connection attempts
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ConnectionManager.MaxHalfOpenConnections">
            <summary>
            The maximum number of concurrent connection attempts
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ConnectionManager.MaxOpenConnections">
            <summary>
            The maximum number of open connections
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.ConnectionManager.OpenConnections">
            <summary>
            The number of open connections
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ConnectionManager.CancelPendingConnects">
            <summary>
            Cancel all pending connection attempts which have exceeded <see cref="P:MonoTorrent.Client.EngineSettings.ConnectionTimeout"/>
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ConnectionManager.CancelPendingConnects(MonoTorrent.Client.TorrentManager)">
            <summary>
            Cancel all pending connection for the given <see cref="T:MonoTorrent.Client.TorrentManager"/>, or which have exceeded <see cref="P:MonoTorrent.Client.EngineSettings.ConnectionTimeout"/>
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.ConnectionManager.IncomingConnectionAcceptedAsync(MonoTorrent.Client.TorrentManager,MonoTorrent.Client.PeerId)">
            <summary>
            This method is called when the ClientEngine recieves a valid incoming connection
            </summary>
            <param name="manager">The torrent which the peer is associated with.</param>
            <param name="id">The peer who just conencted</param>
        </member>
        <member name="M:MonoTorrent.Client.ConnectionManager.ProcessQueue(MonoTorrent.Client.TorrentManager,MonoTorrent.Client.PeerId)">
             <summary>
            
             </summary>
             <param name="manager">The torrent which the peer is associated with.</param>
             <param name="id">The peer whose message queue you want to start processing</param>
        </member>
        <member name="T:MonoTorrent.Client.ConnectionMonitor">
            <summary>
            This class is used to track upload/download speed and bytes uploaded/downloaded for each connection
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.Disposed">
            <summary>
            True if the object has been disposed.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.PendingReads">
            <summary>
            The number of bytes which are currently cached in memory, pending writing.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.PendingWrites">
            <summary>
            The number of bytes which are currently cached in memory, pending writing.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.ReadLimiter">
            <summary>
            Limits how fast data is read from the disk.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.ReadMonitor">
            <summary>
            Tracks how fast the disk is being read from.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.ReadQueue">
            <summary>
            Read requests which have been queued because the <see cref="P:MonoTorrent.Client.EngineSettings.MaximumDiskReadRate"/> limit has been exceeded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.ReadRate">
            <summary>
            The amount of data, in bytes, being read per second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.Settings">
            <summary>
            The settings object passed to the ClientEngine, used to get the current read/write limits.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.WriteLimiter">
            <summary>
            Limits how fast data is written to the disk.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.WriteMonitor">
            <summary>
            Tracks how fast the disk is being written to.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.WriteQueue">
            <summary>
            Read requests which have been queued because the <see cref="P:MonoTorrent.Client.EngineSettings.MaximumDiskWriteRate"/> limit has been exceeded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.WriteRate">
            <summary>
            The amount of data, in bytes, being written per second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.TotalRead">
            <summary>
            The total number of bytes which have been read.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.TotalWritten">
            <summary>
            The total number of bytes which have been written.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.DiskManager.Writer">
            <summary>
            The piece writer used to read/write data
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.DiskManager.FlushAsync(MonoTorrent.ITorrentData)">
            <summary>
            Iterates over every file in this torrent and flushes any pending data to disk. Typically a
            <see cref="T:MonoTorrent.Client.TorrentManager"/> will be passed to this method.
            </summary>
            <param name="manager">The torrent containing the files to flush</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.DiskManager.FlushAsync(MonoTorrent.ITorrentData,System.Int32)">
            <summary>
            Iterates over every file in this torrent which is contains data from the specified piece and
            flushes that file to disk. Typically a <see cref="T:MonoTorrent.Client.TorrentManager"/> will be passed to this method.
            </summary>
            <param name="manager">The torrent containing the files to flush</param>
            <param name="pieceIndex">The index of the piece to flush.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.DiskManager.Tick">
            <summary>
            Attempts to update the rate limits and process pending reads/writes. This method
            self-throttles so it only executes if it has been more than 800ms since the previous
            run. This ensures estimated read/write rates are a little more accurate overall.
            If there are pending reads/writes this method will not block until they are processed.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.DiskManager.Tick(System.Int32)">
            <summary>
            Used for unit testing to allow the rate limits to be updated as if the specified
            amount of time had actually passed. When executed this method will block until
            as many pending reads/writes have been processed as is allowed by the rate limit.
            </summary>
            <param name="delta">The amount of time, in milliseconds, which has passed</param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.InactivePeerManager.InactivePeerList">
            <summary>
            Provides access to the list of URIs we've marked as inactive
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.InactivePeerManager.#ctor(MonoTorrent.Client.TorrentManager)">
            <summary>
            Creates a new inactive peer manager for a torrent manager
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.InactivePeerManager.TimePassed">
            <summary>
            Executed each tick of the client engine
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.PeerExchangeManager">
            <summary>
            This class is used to send each minute a peer excahnge message to peer who have enable this protocol
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerManager.Available">
            <summary>
            The number of peers which are available to be connected to.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerManager.Leechs">
            <summary>
            Returns the number of Leechs we are currently connected to.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.PeerManager.Seeds">
            <summary>
            Returns the number of Seeds we are currently connected to.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Client.PeerManager.TotalPeers">
            <summary>
            This is the total number of known peers. It is the sum of <see cref="P:MonoTorrent.Client.PeerManager.Seeds"/>, <see cref="P:MonoTorrent.Client.PeerManager.Leechs"/> and <see cref="P:MonoTorrent.Client.PeerManager.Available"/>.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.PieceManager">
            <summary>
            Contains the logic for choosing what piece to download next
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.TorrentManager">
            <summary>
            种子管理器
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.PeerConnected">
            <summary>
            This asynchronous event is raised whenever a new incoming, or outgoing, connection
            has successfully completed the handshake process and has been fully established.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.PeerDisconnected">
            <summary>
            This asynchronous event is raised whenever an established connection has been
            closed.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.ConnectionAttemptFailed">
            <summary>
            This asynchronous event is raised when an outgoing connection to a peer
            could not be established.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.ModeChanged">
            <summary>
            This event is raised synchronously and is only used supposed to be used by tests.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.PeersFound">
            <summary>
            Raised whenever new peers are discovered and added. The object will be of type
            <see cref="T:MonoTorrent.Client.TrackerPeersAdded"/>, <see cref="T:MonoTorrent.Client.PeerExchangePeersAdded"/>, <see cref="T:MonoTorrent.Client.LocalPeersAdded"/>
            or <see cref="T:MonoTorrent.Client.DhtPeersAdded"/> depending on the source of the new peers.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.PieceHashed">
            <summary>
            This asynchronous event is raised whenever a piece is hashed, either as part of
            regular downloading, or as part of a <see cref="M:MonoTorrent.Client.TorrentManager.HashCheckAsync(System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.TorrentManager.TorrentStateChanged">
            <summary>
            This asynchronous event is raised whenever the TorrentManager changes state.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.Complete">
            <summary>
            Returns true only when all files have been fully downloaded. If some files are marked as 'DoNotDownload' then the
            torrent will not be considered to be Complete until they are downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.UnhashedPieces">
            <summary>
            If <see cref="P:MonoTorrent.TorrentFile.Priority"/> is set to <see cref="F:MonoTorrent.Priority.DoNotDownload"/> then the pieces
            associated with that <see cref="T:MonoTorrent.TorrentFile"/> will not be hash checked. An IgnoringPicker is used
            to ensure pieces which have not been hash checked are never downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.IsInEndGame">
            <summary>
            True if this torrent has activated special processing for the final few pieces
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.OpenConnections">
            <summary>
            The number of peers that this torrent instance is connected to
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.LastDhtAnnounce">
            <summary>
            The time the last announce to the DHT occurred
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.TorrentManager.LastDhtAnnounceTimer">
            <summary>
            Internal timer used to trigger Dht announces every <see cref="F:MonoTorrent.Dht.DhtEngine.AnnounceInternal"/> seconds.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.LastLocalPeerAnnounce">
            <summary>
            The time the last announce using Local Peer Discovery occurred
            </summary>
        </member>
        <member name="F:MonoTorrent.Client.TorrentManager.LastLocalPeerAnnounceTimer">
            <summary>
            Internal timer used to trigger Local PeerDiscovery announces every <see cref="P:MonoTorrent.Client.LocalPeerDiscovery.AnnounceInternal"/> seconds.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.Peers">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.PieceManager">
            <summary>
            The piecemanager for this TorrentManager
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.InactivePeerManager">
            <summary>
            The inactive peer manager for this TorrentManager
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.PartialProgress">
            <summary>
            The download progress in percent (0 -> 100.0) for the files whose priority
            is not set to <see cref="F:MonoTorrent.Priority.DoNotDownload"/>. If every file is marked
            as <see cref="F:MonoTorrent.Priority.DoNotDownload"/> then this returns 0. If no file is
            marked as 'DoNotDownload' then this returns the same value as <see cref="P:MonoTorrent.Client.TorrentManager.Progress"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.Progress">
            <summary>
            The download progress in percent (0 -> 100.0). This includes all files, even
            if they are marked as <see cref="F:MonoTorrent.Priority.DoNotDownload"/>. This will return
            '100.0' when all files in the torrent have been downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.SavePath">
            <summary>
            The directory to download the files to
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.Settings">
            <summary>
            The settings for with this TorrentManager
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.State">
            <summary>
            The current state of the TorrentManager
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.StartTime">
            <summary>
            The time the torrent manager was started at
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.TrackerManager">
            <summary>
            The tracker connection associated with this TorrentManager
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.Torrent">
            <summary>
            The Torrent contained within this TorrentManager
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentManager.UploadingTo">
            <summary>
            The number of peers that we are currently uploading to
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.#ctor(MonoTorrent.Torrent,System.String)">
            <summary>
            Creates a new TorrentManager instance.
            </summary>
            <param name="torrent">The torrent to load in</param>
            <param name="savePath">The directory to save downloaded files to</param>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.#ctor(MonoTorrent.Torrent,System.String,MonoTorrent.Client.TorrentSettings)">
            <summary>
            Creates a new TorrentManager instance.
            </summary>
            <param name="torrent">The torrent to load in</param>
            <param name="savePath">The directory to save downloaded files to</param>
            <param name="settings">The settings to use for controlling connections</param>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.#ctor(MonoTorrent.Torrent,System.String,MonoTorrent.Client.TorrentSettings,System.String)">
            <summary>
            Creates a new TorrentManager instance.
            </summary>
            <param name="torrent">The torrent to load in</param>
            <param name="savePath">The directory to save downloaded files to</param>
            <param name="settings">The settings to use for controlling connections</param>
            <param name="baseDirectory">In the case of a multi-file torrent, the name of the base directory containing the files. Defaults to Torrent.Name</param>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.ChangePickerAsync(MonoTorrent.Client.PiecePicking.PiecePicker)">
            <summary>
            Changes the active piece picker. This can be called when the manager is running, or when it is stopped.
            </summary>
            <param name="picker">The new picker to use.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.ToString">
            <summary>
            Overrridden. Returns the name of the torrent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.Equals(MonoTorrent.Client.TorrentManager)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.HashCheckAsync(System.Boolean)">
            <summary>
            Performs a full hash check, ignoring any previously loaded Fast Resume data or previous hash checks.
            </summary>
            <param name="autoStart">True if a the TorrentManager should be started as soon as the hashcheck completes.</param>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.PauseAsync">
            <summary>
            异步暂停种子管理器
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.StartAsync">
            <summary>
            异步启动种子管理器
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.DhtAnnounceAsync">
            <summary>
            Perform an announce using the <see cref="P:MonoTorrent.Client.ClientEngine.DhtEngine"/> to retrieve more peers. The
            returned task completes as soon as the Dht announce begins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.StopAsync">
            <summary>
            Stops the TorrentManager. The returned task completes as soon as the manager has fully stopped.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.StopAsync(System.TimeSpan)">
            <summary>
            Stops the TorrentManager. The returned task completes as soon as the manager has fully stopped. The final
            tracker announce will be limited to the maximum of either 2 seconds or <paramref name="timeout"/> seconds.
            </summary>
        </member>
        <member name="M:MonoTorrent.Client.TorrentManager.RaiseConnectionAttemptFailed(MonoTorrent.Client.ConnectionAttemptFailedEventArgs)">
            <summary>
            Raise the connection attempt failed event
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MonoTorrent.Client.PeerConnectedEventArgs">
            <summary>
            Used by the <see cref="E:MonoTorrent.Client.TorrentManager.PeerConnected"/> event
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerConnectedEventArgs.Direction">
            <summary>
            <see cref="F:MonoTorrent.Direction.Incoming"/> if the connection was received by the <see cref="T:MonoTorrent.Client.Listeners.IPeerListener"/> associated
            with the active <see cref="T:MonoTorrent.Client.ClientEngine"/>, otherwise <see cref="F:MonoTorrent.Direction.Outgoing"/> if the
            connection was created by the active <see cref="T:MonoTorrent.Client.TorrentManager"/>
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerConnectedEventArgs.Peer">
            <summary>
            The object which will track the current session with this peer.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.PeerDisconnectedEventArgs">
            <summary>
            Used by the <see cref="E:MonoTorrent.Client.TorrentManager.PeerDisconnected"/> event
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.PeerDisconnectedEventArgs.Peer">
            <summary>
            The peer whose connection was terminated.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.CleanedUpCount">
            <summary>
            The number of times this peer has had it's connection closed
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.ConnectionUri">
            <summary>
            The URI used to make an outgoing connection to this peer.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.AllowedEncryption">
            <summary>
            The types of encryption the peer supports. Initially this is set to <see cref="F:MonoTorrent.Client.EncryptionTypes.All"/>.
            <see cref="F:MonoTorrent.Client.EncryptionTypes.RC4Full"/> and <see cref="F:MonoTorrent.Client.EncryptionTypes.RC4Header"/> different methods
            are removed if a connection cannot be established using that method. For example if PlainText connections
            appear to be rejected by the remote peer, it will be removed from the set so only encrypted connections
            will be tried during the next connection attempt.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.FailedConnectionAttempts">
            <summary>
            The number of times we failed to establish an outgoing connection to this peer.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.IsSeeder">
            <summary>
            A cache of the last known seeding state of this peer. This is used to avoid connecting to seeders when 100%
            of the torrent has been downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.LocalPort">
            <summary>
            The local port this peer is listening for connections on.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.MaybeStale">
            <summary>
            A stale peer is one which came from an old announce/DHT/peer exchange request. These
            peers may still be contactable, but if a new peer is provided via one of the normal
            mechanisms then the new peer should replace any stale peers in the event the torrent
            is already holding the maximum number of peers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.PeerId">
            <summary>
            The 20 byte identifier for the peer.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.RepeatedHashFails">
            <summary>
            The number of times, in a row, that this peer has sent us the blocks for a piece and that
            piece failed the hash check.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.Peer.TotalHashFails">
            <summary>
            This is the overall count for the number of pieces which failed the hash check after being
            received from this peer.
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.EngineSettings">
            <summary>
            引擎配置类
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.AllowedEncryption">
            <summary>
            A flags enum representing which encryption methods are allowed. Defaults to <see cref="F:MonoTorrent.Client.EncryptionTypes.All"/>.
            If <see cref="F:MonoTorrent.Client.EncryptionTypes.None"/> is set, then encrypted and unencrypted connections will both be disallowed
            and no connections will be made. Defaults to <see cref="F:MonoTorrent.Client.EncryptionTypes.All"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.AllowHaveSuppression">
            <summary>
            Have suppression reduces the number of Have messages being sent by only sending Have messages to peers
            which do not already have that piece. A peer will never request a piece they have already downloaded,
            so informing them that we have that piece is not beneficial. Defaults to <see langword="false" />.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.ConnectionTimeout">
            <summary>
            If a connection attempt does not complete within the given timeout, it will be cancelled so
            a connection can be attempted with a new peer. Defaults to 10 seconds. It is highly recommended
            to keep this value within a range of 7-15 seconds unless absolutely necessary.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.ListenPort">
            <summary>
            引擎监听的入站端口,默认:52138
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumConnections">
            <summary>
            打开连接的最大并发数,默认150上限.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumDownloadSpeed">
            <summary>
            最大的下载速度(字节/秒),值为0表示无限制,默认为:0
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumHalfOpenConnections">
            <summary>
            连接尝试的最大次数,默认为:8
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumUploadSpeed">
            <summary>
            最大上传速度(字节/秒),值为0表示无限制,默认为:0
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumOpenFiles">
            <summary>
            可同时打开的最大文件数,在限制进程最大文件句柄数的平台上.
            限制打开的文件数可以防止计算机资源耗尽,值0表示无限制,但不建议这样做.默认为:20
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumDiskReadRate">
            <summary>
            最大磁盘读取速度(字节/秒).值为0表示无限制.
            只对非SSD驱动器有用,以防止哈希处理使可用驱动器带宽饱和.默认为:0
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.MaximumDiskWriteRate">
            <summary>
            The maximum disk write speed, in bytes per second. A value of 0 means unlimited. This is
            typically only useful for non-SSD drives to prevent the downloading process from saturating
            the available drive bandwidth. If the download speed exceeds the max write rate then the
            download will be throttled. Defaults to 0.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.ReportedAddress">
            <summary>
            If the IPAddress incoming peer connections are received on differs from the IPAddress the tracker
            Announce or Scrape requests are sent from, specify it here. Typically this should not be set.
            Defaults to <see langword="null" />
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.PreferEncryption">
            <summary>
            If this is set to false and <see cref="P:MonoTorrent.Client.EngineSettings.AllowedEncryption"/> allows <see cref="F:MonoTorrent.Client.EncryptionTypes.PlainText"/>, then
            unencrypted connections will be used by default for new outgoing connections. Otherwise, if <see cref="P:MonoTorrent.Client.EngineSettings.AllowedEncryption"/>
            allows <see cref="F:MonoTorrent.Client.EncryptionTypes.RC4Full"/> or <see cref="F:MonoTorrent.Client.EncryptionTypes.RC4Header"/> then an encrypted connection
            will be used by default for new outgoing connections. Defaults to <see langword="true" />.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.EngineSettings.SavePath">
            <summary>
            这是使用磁链接启动下载时保存.torrent元数据的路径
            Defaults to <see langword="null" />
            </summary>
        </member>
        <member name="T:MonoTorrent.Client.TorrentSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.AllowDht">
            <summary>
            If set to false then the <see cref="T:MonoTorrent.Dht.DhtEngine"/> registered with the <see cref="T:MonoTorrent.Client.ClientEngine" /> will
            never be used to locate additional peers. Defaults to true.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.AllowInitialSeeding">
            <summary>
            If set to true, and there are no other seeders for this torrent, then Initial Seeding mode may be used to
            prioritise sharing pieces which are not already available in the swarm.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.AllowPeerExchange">
            <summary>
            If set to false then Peer Exchange messages will never be used to locate additional peers. Defaults to true.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.MaximumPeerDetails">
            <summary>
            The number of peers we should maintain in our internal lists. If we are allowed maintain 100 connections,
            we will store 150 peer ip/port combos in memory. This should ensure we hit our maximum allowed connections.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.MaximumConnections">
            <summary>
            The maximum number of concurrent open connections for this torrent. Defaults to 60.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.MaximumDownloadSpeed">
            <summary>
            最大的下载速度, in bytes per second, for this torrent. A value of 0 means unlimited. Defaults to 0.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.MaximumUploadSpeed">
            <summary>
            最大的上传速度, in bytes per second, for this torrent. A value of 0 means unlimited. defaults to 0.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.UploadSlots">
            <summary>
            The number of peers which can be uploaded to concurrently for this torrent. A value of 0 means unlimited. defaults to 8.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.WebSeedDelay">
            <summary>
            The delay before a torrent will start using web seeds.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.WebSeedSpeedTrigger">
            <summary>
            The download speed under which a torrent will start using web seeds.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.TimeToWaitUntilIdle">
            <summary>
            The time, in seconds, the inactivity manager should wait until it can consider a peer eligible for disconnection.  Peers are disconnected only if they have not provided
            any data.  Default is 600.  A value of 0 disables the inactivity manager.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.TorrentSettings.ConnectionRetentionFactor">
            <summary>
            When considering peers that have given us data, the inactivity manager will wait TimeToWaiTUntilIdle plus (Number of bytes we've been sent / ConnectionRetentionFactor) seconds
            before they are eligible for disconnection.  Default value is 2000.  A value of 0 prevents the inactivity manager from disconnecting peers that have sent data.
            </summary>
        </member>
        <member name="E:MonoTorrent.Client.IUnchokeable.StateChanged">
            <summary>
            Raised whenever the torrent manager's state changes.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.Seeding">
            <summary>
            True if we are currently seeding.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.DownloadSpeed">
            <summary>
            Download speed in bytes/second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.UploadSpeed">
            <summary>
            Upload speed in bytes/second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.MaximumDownloadSpeed">
            <summary>
            Maximum download speed in bytes/second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.MaximumUploadSpeed">
            <summary>
            Maximum upload speed in bytes/second
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.UploadSlots">
            <summary>
            The maximum number of peers which can be unchoked concurrently. 0 means unlimited.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.UploadingTo">
            <summary>
            The number of peers which are currently unchoked.
            </summary>
        </member>
        <member name="P:MonoTorrent.Client.IUnchokeable.Peers">
            <summary>
            List of peers which can be choked/unchoked
            </summary>
        </member>
        <member name="M:MonoTorrent.Dht.Listeners.DhtListenerFactory.CreateUdp(System.Int32)">
            <summary>
            Creates a listener which binds to IPAddress.Any and listens for incoming UDP requests on the given local port.
            </summary>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Dht.Listeners.DhtListenerFactory.CreateUdp(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a listener which listens for incoming UDP requests on the given local IP address and port.
            </summary>
            <param name="address">The local IP address to bind to.</param>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Dht.Listeners.DhtListenerFactory.CreateUdp(System.Net.IPEndPoint)">
            <summary>
            Creates a listener which listens for incoming UDP requests on the given local IP address and port.
            </summary>
            <param name="endpoint">The local endpoint to bind to.</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Dht.Bucket">
            <summary>
            This class holds a maximum amount of 8 Nodes and is itself a child of a RoutingTable
            </summary>
        </member>
        <member name="T:MonoTorrent.Dht.DhtEngine">
            <summary>
            DHT引擎
            </summary>
        </member>
        <member name="M:MonoTorrent.Dht.DhtEngine.#ctor(System.Net.IPEndPoint)">
            <summary>
            Creates a new DhtEngine which listens for connections on the given endpoint
            </summary>
            <param name="listenerEndpoint">The IPAddresss/port which the engine should listen on</param>
        </member>
        <member name="M:MonoTorrent.Dht.DhtEngine.#ctor(MonoTorrent.Dht.Listeners.IDhtListener)">
            <summary>
            构造DHT引擎
            </summary>
            <param name="listener">监听对象</param>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.Engine">
            <summary>
             The DHT engine which owns this message loop.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.Listener">
            <summary>
            The listener instance which is used to send/receive messages.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.PendingQueries">
            <summary>
            The number of DHT messages which have been sent and no response has been received.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.ReceiveQueue">
            <summary>
            The list of messages which have been received from the attached IDhtListener which
            are waiting to be processed by the engine.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.SendQueue">
            <summary>
            The list of messages which have been queued to send.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.Timeout">
            <summary>
            If a response is not received before the timeout expires, it will be cancelled.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.WaitingResponse">
            <summary>
            This is the list of messages which have been sent but no response (or error) has
            been received yet. The key for the dictionary is the TransactionId for the Query.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.MessageLoop.WaitingResponseTimedOut">
            <summary>
            Temporary (re-usable) storage when cancelling timed out messages.
            </summary>
        </member>
        <member name="T:MonoTorrent.Streaming.LocalStream">
            <summary>
            A seekable Stream which can be used to access a <see cref="T:MonoTorrent.TorrentFile"/> while it is downloading.
            If the stream seeks to a location which hasn't been downloaded yet, <see cref="M:MonoTorrent.Streaming.LocalStream.Read(System.Byte[],System.Int32,System.Int32)"/>
            will block until the data is available. <see cref="M:MonoTorrent.Streaming.LocalStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)"/>
            will perform a non-blocking wait for the data.
            </summary>
        </member>
        <member name="T:MonoTorrent.Streaming.StreamProvider">
            <summary>
            Prepare the TorrentManager so individual files can be accessed while they are downloading.
            </summary>
        </member>
        <member name="P:MonoTorrent.Streaming.StreamProvider.Active">
            <summary>
            Returns true when the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> has been started.
            </summary>
        </member>
        <member name="P:MonoTorrent.Streaming.StreamProvider.Cancellation">
            <summary>
            Can be used to cancel pending operations when StopAsync is invoked.
            </summary>
        </member>
        <member name="P:MonoTorrent.Streaming.StreamProvider.Paused">
            <summary>
            Returns true when the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> has been paused.
            </summary>
        </member>
        <member name="P:MonoTorrent.Streaming.StreamProvider.Files">
            <summary>
            If the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> was created using a <see cref="T:MonoTorrent.Torrent"/> then
            the files will be available immediately. Otherwise the files will be available as soon
            as the metadata has been downloaded. The <see cref="T:System.Threading.Tasks.Task"/> returned by <see cref="M:MonoTorrent.Streaming.StreamProvider.WaitForMetadataAsync"/>
            will complete after this has been set to the list of files.
            </summary>
        </member>
        <member name="P:MonoTorrent.Streaming.StreamProvider.Manager">
            <summary>
            The underlying <see cref="T:MonoTorrent.Client.TorrentManager"/> used to download the data.
            It is safe to attach to events, retrieve state and also change any of
            the settings associated with this TorrentManager. You should never
            call StartAsync, StopAsync, PauseAsync or similar life-cycle methods,
            nor should you attempt to register this with a <see cref="T:MonoTorrent.Client.ClientEngine"/>.
            </summary>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.#ctor(MonoTorrent.Client.ClientEngine,System.String,MonoTorrent.Torrent)">
            <summary>
            Creates a StreamProvider for the given <see cref="T:MonoTorrent.Torrent"/> so that files
            contained within the torrent can be accessed as they are downloading.
            </summary>
            <param name="engine">The engine used to host the download.</param>
            <param name="saveDirectory">The directory where the torrents data will be saved</param>
            <param name="torrent">The torrent to download</param>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.#ctor(MonoTorrent.Client.ClientEngine,System.String,MonoTorrent.MagnetLink,System.String)">
            <summary>
            Creates a StreamProvider for the given <see cref="T:MonoTorrent.MagnetLink"/> so that files
            contained within the torrent can be accessed as they are downloading.
            </summary>
            <param name="engine">The engine used to host the download.</param>
            <param name="saveDirectory">The directory where the torrents data will be saved</param>
            <param name="magnetLink">The MagnetLink to download</param>
            <param name="metadataSaveDirectory">The directory where the metadata will be saved. The
            filename will be constucted by appending '.torrent' to the value returned by <see cref="M:MonoTorrent.InfoHash.ToHex"/>
            </param>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.StartAsync">
            <summary>
            Registers <see cref="P:MonoTorrent.Streaming.StreamProvider.Manager"/> with the <see cref="T:MonoTorrent.Client.ClientEngine"/>
            and calls <see cref="M:MonoTorrent.Client.TorrentManager.StartAsync"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.PauseAsync">
            <summary>
            Calls <see cref="M:MonoTorrent.Client.TorrentManager.PauseAsync"/> to pause Hashing, Seeding or Downloading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.ResumeAsync">
            <summary>
            Calls <see cref="M:MonoTorrent.Client.TorrentManager.StartAsync"/> to resume Hashing, Seeding or Downloading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.StopAsync">
            <summary>
            Calls <see cref="M:MonoTorrent.Client.TorrentManager.StopAsync"/> on <see cref="P:MonoTorrent.Streaming.StreamProvider.Manager"/> and unregisters
            it from the <see cref="T:MonoTorrent.Client.ClientEngine"/>. This will dispose the stream returned by the
            most recent invocation of <see cref="M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.TorrentFile)"/> or
            <see cref="M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.TorrentFile)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.TorrentFile)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> which can be used to access the given <see cref="T:MonoTorrent.TorrentFile"/>
            while it is downloading. This stream is seekable and readable. The first and last pieces of
            this file will be buffered before the stream is created. Finally, this stream must be disposed
            before another stream can be created.
            </summary>
            <param name="file">The file to open</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.TorrentFile,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> which can be used to access the given <see cref="T:MonoTorrent.TorrentFile"/>
            while it is downloading. This stream is seekable and readable. The first and last pieces of
            this file will be buffered before the stream is created. Finally, this stream must be disposed
            before another stream can be created.
            </summary>
            <param name="file">The file to open</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.CreateStreamAsync(MonoTorrent.TorrentFile,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> which can be used to access the given <see cref="T:MonoTorrent.TorrentFile"/>
            while it is downloading. This stream is seekable and readable. The first and last pieces of
            this file will be buffered before the stream is created if <paramref name="prebuffer"/> is
            set to true. Finally, this stream must be disposed before another stream can be created.
            </summary>
            <param name="file">The file to open</param>
            <param name="prebuffer">True if the first and last piece should be downloaded before the Stream is created.</param>
            <param name="token">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.TorrentFile)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> which can be used to access the given <see cref="T:MonoTorrent.TorrentFile"/>
            while it is downloading. This stream is seekable and readable. This stream must be disposed
            before another stream can be created.
            </summary>
            <param name="file">The file to open</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.TorrentFile,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> which can be used to access the given <see cref="T:MonoTorrent.TorrentFile"/>
            while it is downloading. This stream is seekable and readable. This stream must be disposed
            before another stream can be created.
            </summary>
            <param name="file">The file to open</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.CreateHttpStreamAsync(MonoTorrent.TorrentFile,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> which can be used to access the given <see cref="T:MonoTorrent.TorrentFile"/>
            while it is downloading. This stream is seekable and readable. This stream must be disposed
            before another stream can be created.
            </summary>
            <param name="file">The file to open</param>
            <param name="prebuffer">True if the first and last piece should be downloaded before the Stream is created.</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.WaitForMetadataAsync">
            <summary>
            If the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> was created using a MagnetLink, the <see cref="T:System.Threading.Tasks.Task"/>
            returned by this method will complete when the <see cref="P:MonoTorrent.Streaming.StreamProvider.Files"/> property is non-null. If
            the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> was created using a <see cref="T:MonoTorrent.Torrent"/> instance then
            this will return a completed task as <see cref="P:MonoTorrent.Streaming.StreamProvider.Files"/> will already be non-null.
            This operation will be cancelled if <see cref="M:MonoTorrent.Streaming.StreamProvider.StopAsync"/> is invoked.
            </summary>
        </member>
        <member name="M:MonoTorrent.Streaming.StreamProvider.WaitForMetadataAsync(System.Threading.CancellationToken)">
            <summary>
            If the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> was created using a MagnetLink, the <see cref="T:System.Threading.Tasks.Task"/>
            returned by this method will complete when the <see cref="P:MonoTorrent.Streaming.StreamProvider.Files"/> property is non-null. If
            the <see cref="T:MonoTorrent.Streaming.StreamProvider"/> was created using a <see cref="T:MonoTorrent.Torrent"/> instance then
            this will return a completed task as <see cref="P:MonoTorrent.Streaming.StreamProvider.Files"/> will already be non-null.
            This operation will be cancelled if <see cref="M:MonoTorrent.Streaming.StreamProvider.StopAsync"/> is invoked.
            </summary>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentFolderWatcher.OnCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>Gets called when a File with .torrent extension was added to the torrentDirectory</summary>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentFolderWatcher.OnDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>Gets called when a File with .torrent extension was deleted from the torrentDirectory</summary>
        </member>
        <member name="T:MonoTorrent.TorrentWatcher.TorrentWatcherEventArgs">
            <summary>
            Provides the data needed to handle a TorrentWatcher event
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentWatcher.TorrentWatcherEventArgs.TorrentPath">
            <summary>
            The full path of the torrent
            </summary>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentWatcherEventArgs.#ctor(System.String)">
            <summary>
            Creates a new TorrentWatcherEventArgs
            </summary>
            <param name="torrentPath">The full path to the torrent file</param>
        </member>
        <member name="T:MonoTorrent.TorrentWatcher.TorrentWatchers">
            <summary>
            Main controller class for ITorrentWatcher
            </summary>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentWatchers.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentWatchers.StartAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentWatchers.StopAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoTorrent.TorrentWatcher.TorrentWatchers.ForceScanAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.HttpTrackerListener.Start(System.Threading.CancellationToken)">
            <summary>
            Starts listening for incoming connections
            </summary>
        </member>
        <member name="T:MonoTorrent.Tracker.Listeners.ITrackerListener">
            <summary>
            Listens for incoming Announce or Scrape requests and sends the response back.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateHttp(System.Int32)">
            <summary>
            Creates a listener to receive incoming HTTP requests on IPAddress.Any and the given port.
            The resulting HTTP prefix will be similar to http://{address}:{port}/announce/ and will support Scrape requests.
            </summary>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateHttp(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a listener to receive incoming HTTP requests on the given local IP address and port.
            The resulting HTTP prefix will be similar to http://{address}:{port}/announce/ and will support Scrape requests.
            </summary>
            <param name="address">The local IP address to bind to.</param>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateHttp(System.Net.IPEndPoint)">
            <summary>
            Creates a listener to receive incoming HTTP requests on the given local endpoint.
            The resulting HTTP prefix will be similar to http://{address}:{port}/announce/ and will support Scrape requests.
            </summary>
            <param name="endpoint">The local endpoint to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateHttp(System.String)">
            <summary>
            Creates a listener to receive incoming HTTP requests on the given HTTP prefix. If
            the prefix ends in '/announce/' it will support Scrape requests, otherwise scraping will be disabled.
            The prefix should be in the form http://{address}:{port}/test/query/announce/
            </summary>
            <param name="httpPrefix">The HTTP prefix to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateUdp(System.Int32)">
            <summary>
            Creates a listener which binds to IPAddress.Any and listens for incoming UDP requests on the given local port.
            </summary>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateUdp(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a listener which listens for incoming UDP requests on the given local IP address and port.
            </summary>
            <param name="address">The local IP address to bind to.</param>
            <param name="port">The local port to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.TrackerListenerFactory.CreateUdp(System.Net.IPEndPoint)">
            <summary>
            Creates a listener which listens for incoming UDP requests on the given local IP address and port.
            </summary>
            <param name="endpoint">The local endpoint to bind to.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.Listeners.UdpTrackerListener.Start(System.Threading.CancellationToken)">
            <summary>
            Starts listening for incoming connections
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.ClientAddress">
            <summary>
            This is the IPAddress/Port that the client is listening for incoming connections on. If the
            announce request contained an 'ip' parameter then it is used, otherwise the actual IP from the
            request is used.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.Downloaded">
            <summary>
            The total number of bytes downloaded since the 'Started' event was sent.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.Event">
            <summary>
            The event, if any, associated with this announce
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.Left">
            <summary>
            The number of bytes which still need to be downloaded to make the torrent 100% complete.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.HasRequestedCompact">
            <summary>
            True if the peers should be returned in compact form.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.InfoHash">
            <summary>
            The infohash of the torrent this request is associated with.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.Key">
            <summary>
            An arbitrary identifier generated by the client which can be used to track the client even if
            it's IP address changes. This is never shared with other peers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.IsValid">
            <summary>
            Returns false if any required parameters are missing from the request. If this occurs the 'Response'
            dictionary will be populated with the appropriate error message.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.NumberWanted">
            <summary>
            The number of peers the client wants to receive. If unspecified then the tracker default amount
            be returned.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.PeerId">
            <summary>
            The 20 byte identifier for the peer. This is shared with other peers when a non-compact response
            is returned.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.Port">
            <summary>
            The port the client is listening for incoming connections on.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.TrackerId">
            <summary>
            The first time a peer announces to a tracker, we send it the <see cref="P:MonoTorrent.Tracker.TrackerServer.TrackerId"/>
            of this tracker. Subsequent announce requests should send that value.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.AnnounceRequest.Uploaded">
            <summary>
            The total amount of bytes uploaded since the 'Started' event was sent.
            </summary>
        </member>
        <member name="T:MonoTorrent.Tracker.ClientAddressComparer">
            <summary>
            Uses the <see cref="P:MonoTorrent.Tracker.AnnounceRequest.ClientAddress"/> field to compare peers when handling Announce or Scrape requests.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.ClientAddressComparer.GetKey(MonoTorrent.Tracker.AnnounceRequest)">
            <summary>
            Returns the <see cref="P:MonoTorrent.Tracker.AnnounceRequest.ClientAddress"/> field to use to compare peers.
            </summary>
            <param name="parameters">The data sent as part of the Announce request</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Tracker.IPeerComparer">
            <summary>
            Returns one of the properties from a peers <see cref="T:MonoTorrent.Tracker.AnnounceRequest"/>, or a value derived from
            properties on the <see cref="T:MonoTorrent.Tracker.AnnounceRequest"/>, to use when comparing peers.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.IPeerComparer.GetKey(MonoTorrent.Tracker.AnnounceRequest)">
            <summary>
            Returns one of the properties from the <see cref="T:MonoTorrent.Tracker.AnnounceRequest"/> object, or a value derived from
            properties on the <see cref="T:MonoTorrent.Tracker.AnnounceRequest"/> object, to use when comparing peers.
            </summary>
            <param name="parameters">The data sent as part of the Announce request</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Tracker.ITrackable">
            <summary>
            The tracker monitors peers for any ITrackable item
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackable.InfoHash">
            <summary>
            The infohash of the torrent being tracked
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackable.Name">
            <summary>
            The name of the torrent being tracked
            </summary>
        </member>
        <member name="T:MonoTorrent.Tracker.ITrackerItem">
            <summary>
            Represents the metadata for a torrent when it is being tracked in a <see cref="T:MonoTorrent.Tracker.TrackerServer"/>
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackerItem.Complete">
            <summary>
            The number of active seeders
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackerItem.Count">
            <summary>
            The total number of peers being tracked
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackerItem.Downloaded">
            <summary>
            The total number of times the torrent has been fully downloaded
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackerItem.Incomplete">
            <summary>
            The number of active leechers
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.ITrackerItem.Trackable">
            <summary>
            Represents the InfoHash (or equivalent) of the torrent which is being tracked.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.ITrackerItem.GetPeers">
            <summary>
            Return a copy of the list of peers
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Tracker.Peer">
            <summary>This class holds informations about Peers downloading Files</summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.ClientAddress">
            <summary>
            The IPEndpoint at which the client is listening for connections at
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.CompactEntry">
            <summary>
             A byte[] containing the peer's IPEndpoint in compact form
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.Downloaded">
            <summary>
            The amount of data (in bytes) which the peer has downloaded this session
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.DownloadSpeed">
            <summary>
            The estimated download speed of the peer in bytes/second
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.HasCompleted">
            <summary>
             True if the peer has completed the torrent
             </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.LastAnnounceTime">
            <summary>
            The time when the peer last announced at
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.NonCompactEntry">
            <summary>The peer entry in non compact format.</summary> 
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.PeerId">
            <summary>
            The Id of the client software
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.Remaining">
            <summary>
            The amount of data (in bytes) which the peer has to download to complete the torrent
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.Uploaded">
            <summary>
            The amount of data the peer has uploaded this session
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.Peer.UploadSpeed">
            <summary>
            The estimated upload speed of the peer in bytes/second
            </summary>
        </member>
        <member name="T:MonoTorrent.Tracker.PeerIdComparer">
            <summary>
            Uses the <see cref="P:MonoTorrent.Tracker.AnnounceRequest.PeerId"/> field to compare peers when handling Announce or Scrape requests.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.PeerIdComparer.GetKey(MonoTorrent.Tracker.AnnounceRequest)">
            <summary>
            Returns the <see cref="P:MonoTorrent.Tracker.AnnounceRequest.PeerId"/> field to use to compare peers.
            </summary>
            <param name="parameters">The data sent as part of the Announce request</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Tracker.RequestMonitor">
            <summary>
            Tracks the number of Announce and Scrape requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.RequestMonitor.AnnounceRate">
            <summary>
            This is the number of announce requests handled per second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.RequestMonitor.ScrapeRate">
            <summary>
            This is the number of scrape requests handled per second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.RequestMonitor.TotalAnnounces">
            <summary>
            The total number of announces handled.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.RequestMonitor.TotalScrapes">
            <summary>
            The total number of  scrapes handled.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerScrapeRequest.InfoHashes">
            <summary>
            The list of infohashes contained in the scrape request
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerScrapeRequest.IsValid">
            <summary>
            Returns false if any required parameters are missing from the original request.
            </summary>
        </member>
        <member name="T:MonoTorrent.Tracker.SimpleTorrentManager">
            <summary>
            This class is a TorrentManager which uses .Net Generics datastructures, such 
            as Dictionary and List to manage Peers from a Torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Comparer">
            <summary>
            Used to check whether two <see cref="T:MonoTorrent.Tracker.Peer"/> objects are the same.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Complete">
            <summary>
            The number of active seeds (peers which have fully downloaded the torrent).
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Count">
            <summary>
            The number of active peers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Downloaded">
            <summary>
            The number of times the torrent has been fully downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Incomplete">
            <summary>
            The number of active leeches (peers which have not fully downloaded the torrent).
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Random">
            <summary>
            Used to choose the start point in the peer list when choosing the peers to return.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Peers">
            <summary>
            A dictionary containing all the peers
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.PeersList">
            <summary>
            A list which used used to reduce allocations when generating responses to announce requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Trackable">
            <summary>
            The torrent being tracked
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.SimpleTorrentManager.Tracker">
            <summary>
            A reference to the TrackerServer associated with this torrent.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.SimpleTorrentManager.Add(MonoTorrent.Tracker.Peer)">
            <summary>
            Adds the peer to the tracker
            </summary>
            <param name="peer"></param>
        </member>
        <member name="M:MonoTorrent.Tracker.SimpleTorrentManager.GetPeers(MonoTorrent.BEncoding.BEncodedDictionary,System.Int32,System.Boolean)">
            <summary>
            Retrieves a semi-random list of peers which can be used to fulfill an Announce request
            </summary>
            <param name="response">The bencoded dictionary to add the peers to</param>
            <param name="count">The number of peers to add</param>
            <param name="compact">True if the peers should be in compact form</param>
        </member>
        <member name="M:MonoTorrent.Tracker.SimpleTorrentManager.Remove(MonoTorrent.Tracker.Peer)">
            <summary>
            Removes the peer from the tracker
            </summary>
            <param name="peer">The peer to remove</param>
        </member>
        <member name="M:MonoTorrent.Tracker.SimpleTorrentManager.Update(MonoTorrent.Tracker.AnnounceRequest)">
            <summary>
            Updates the peer in the tracker database based on the announce parameters
            </summary>
            <param name="par"></param>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerRequest.Parameters">
            <summary>
            The raw (url-encoded) key/value pairs from the original query string
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerRequest.Response">
            <summary>
            The BEncodedDictionary which will be sent back to the client who initiated this request
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerRequest.RemoteAddress">
            <summary>
            The IPAddress for the remote client who initiated this request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.AllowNonCompact">
            <summary>
            If this false then all Announce requests which require non-compact peer encoding will
            be fulfilled by returning an error response. Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.AllowScrape">
            <summary>
            If this is false then any Scrape requests will be fulfilled by returning an error response.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.AllowUnregisteredTorrents">
            <summary>
            If this is true then the tracker will add any infohash to it's table as soon as the first
            Announce request is received. If it is false, an error response will be sent for any Announce
            or Scrape request which queries an infohash which has not been pre-registered with the tracker.
            Defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.AnnounceInterval">
            <summary>
            This is the regular interval in which peers should re-announce. It should be less than 1/2 the Timeout interval so
            peers must miss two announce before timing out. Defaults to 45 minutes.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.Count">
            <summary>
            The number of torrents being tracked
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.Disposed">
            <summary>
            True if the tracker has been disposed.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.MinAnnounceInterval">
            <summary>
            This is the minimum time between Announce. No peer should announce more frequently than this.
            Defaults to 10 minutes.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.Requests">
            <summary>
            Tracks the number of Announce and Scrape requests, and the requests per second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.TimeoutInterval">
            <summary>
            This is the amount of time that has to elapse since an Announce or Scrape request until a peer is
            considered offline and is removed from the list. Defaults to 50 minutes.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.TrackerId">
            <summary>
            The unique identifier for this tracker. It should be considered an arbitrary string with no
            specific meaning, but by default it is of the form "MO1234-{random positive integer}" to allow the
            tracker to be identified.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.Listeners">
            <summary>
            The listeners which have been registered with the tracker.
            </summary>
        </member>
        <member name="P:MonoTorrent.Tracker.TrackerServer.Torrents">
            <summary>
            The infohashes which have been registered with the tracker, along with the metadata associated with them.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.#ctor">
            <summary>
            Creates a new tracker using an autogenerated unique identifier as the <see cref="P:MonoTorrent.Tracker.TrackerServer.TrackerId"/>.
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.#ctor(MonoTorrent.BEncoding.BEncodedString)">
            <summary>
            Creates a new tracker
            </summary>
            <param name="trackerId">The unique identifier to use as the <see cref="P:MonoTorrent.Tracker.TrackerServer.TrackerId"/></param>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.Add(MonoTorrent.Tracker.ITrackable)">
            <summary>
            Adds the trackable to the tracker. Peers will be compared for equality based on their PeerId.
            </summary>
            <param name="trackable">The trackable to add</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.Add(MonoTorrent.Tracker.ITrackable,MonoTorrent.Tracker.IPeerComparer)">
            <summary>
            Adds the trackable to the server
            </summary>
            <param name="trackable">The trackable to add</param>
            <param name="comparer">The comparer used to decide whether two peers are the same.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.Contains(MonoTorrent.Tracker.ITrackable)">
            <summary>
            Checks if the InfoHash associated with the given trackable has been registered with the tracker.
            </summary>
            <param name="trackable"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.GetTrackerItem(MonoTorrent.Tracker.ITrackable)">
            <summary>
            Returns the manager associated with the given trackable. If the trackable has not been registered
            with this tracker then null will be returned.
            </summary>
            <param name="trackable"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.GetTrackerItems">
            <summary>
            Returns a duplicate of the list of active torrents
            </summary>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.Remove(MonoTorrent.Tracker.ITrackable)">
            <summary>
            Removes the trackable from the tracker
            </summary>
            <param name="trackable"></param>
        </member>
        <member name="M:MonoTorrent.Tracker.TrackerServer.Dispose">
            <summary>
            This unregisters all listeners so no further requests will be processed by this tracker. The listeners
            themselves are not disposed.
            </summary>
        </member>
        <member name="T:MonoTorrent.BitField">
            <summary>
            This class is for represting the Peer's bitfield
            </summary>
        </member>
        <member name="P:MonoTorrent.FileMapping.Source">
            <summary>
            This is the full path to the file on disk
            </summary>
        </member>
        <member name="P:MonoTorrent.FileMapping.Destination">
            <summary>
            This is the relative path to the file within the Torrent
            </summary>
        </member>
        <member name="F:MonoTorrent.Hashes.HashCodeLength">
            <summary>
            Hash code length (in bytes)
            </summary>
        </member>
        <member name="P:MonoTorrent.Hashes.Count">
            <summary>
            Number of Hashes (equivalent to number of Pieces)
            </summary>
        </member>
        <member name="M:MonoTorrent.Hashes.IsValid(System.Byte[],System.Int32)">
            <summary>
            Determine whether a calculated hash is equal to our stored hash
            </summary>
            <param name="hash">Hash code to check</param>
            <param name="hashIndex">Index of hash/piece to verify against</param>
            <returns>true iff hash is equal to our stored hash, false otherwise</returns>
        </member>
        <member name="M:MonoTorrent.Hashes.ReadHash(System.Int32)">
            <summary>
            Returns the hash for a specific piece
            </summary>
            <param name="hashIndex">Piece/hash index to return</param>
            <returns>byte[] (length HashCodeLength) containing hashdata</returns>
        </member>
        <member name="P:MonoTorrent.ITorrentData.Files">
            <summary>
            The files contained within the Torrent
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentData.PieceLength">
            <summary>
            The size, in bytes, of each piece
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentData.Size">
            <summary>
            The size, in bytes, of the torrent.
            </summary>
        </member>
        <member name="M:MonoTorrent.ITorrentDataExtensions.PieceCount(MonoTorrent.ITorrentData)">
            <summary>
            The number of pieces in the torrent
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.MagnetLink">
            <summary>
            磁力链接
            </summary>
        </member>
        <member name="P:MonoTorrent.MagnetLink.AnnounceUrls">
            <summary>
            The list of tracker Urls.
            </summary>
        </member>
        <member name="P:MonoTorrent.MagnetLink.InfoHash">
            <summary>
            The infohash of the torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.MagnetLink.Size">
            <summary>
            数据的字节量.
            </summary>
        </member>
        <member name="P:MonoTorrent.MagnetLink.Name">
            <summary>
            对应的种子名称.
            </summary>
        </member>
        <member name="P:MonoTorrent.MagnetLink.Webseeds">
            <summary>
            The list of webseed Urls.
            </summary>
        </member>
        <member name="M:MonoTorrent.MagnetLink.Parse(System.String)">
            <summary>
            将磁力链接字符串转换成磁力链接对象. uri必须为[magnet:?xt=urn:btih:]开头的字符串
            </summary>
            <param name="uri">以[magnet:?xt=urn:btih:]开头的字符串</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.MagnetLink.FromUri(System.Uri)">
            <summary>
            从给定的Uri解析磁铁链接. uri必须为[magnet:?xt=urn:btih:]开头的Uri对象
            </summary>
            <param name="uri">以[magnet:?xt=urn:btih:]开头的Uri对象</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.ClientApp">
            <summary>
            BitTorrrent 
            </summary>
            <remarks>
            Good place for information about BT peer ID conventions:
                http://wiki.theory.org/BitTorrentSpecification
                http://transmission.m0k.org/trac/browser/trunk/libtransmission/clients.c (hello Transmission authors!) :)
                http://rufus.cvs.sourceforge.net/rufus/Rufus/g3peerid.py?view=log (for older clients)
                http://shareaza.svn.sourceforge.net/viewvc/shareaza/trunk/shareaza/BTClient.cpp?view=markup
                http://libtorrent.rakshasa.no/browser/trunk/libtorrent/src/torrent/peer/client_list.cc
            </remarks>
        </member>
        <member name="T:MonoTorrent.Software">
            <summary>
            Class representing the various and sundry BitTorrent Clients lurking about on the web
            </summary>
        </member>
        <member name="P:MonoTorrent.Software.Client">
            <summary>
            The name of the torrent software being used
            </summary>
            <value>The client.</value>
        </member>
        <member name="P:MonoTorrent.Software.PeerId">
            <summary>
            The peer's ID
            </summary>
            <value>The peer id.</value>
        </member>
        <member name="P:MonoTorrent.Software.ShortId">
            <summary>
            A shortened version of the peers ID
            </summary>
            <value>The short id.</value>
        </member>
        <member name="M:MonoTorrent.Software.#ctor(MonoTorrent.BEncoding.BEncodedString)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoTorrent.Software"/> class.
            </summary>
            <param name="peerId">The peer id.</param>
        </member>
        <member name="M:MonoTorrent.SpeedMonitor.AddDelta(System.Int32)">
            <summary>
            This method is threadsafe and can be called at any point.
            </summary>
            <param name="speed"></param>
        </member>
        <member name="M:MonoTorrent.Toolbox.Randomize``1(System.Collections.Generic.List{``0})">
            <summary>
            Randomizes the contents of the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:MonoTorrent.Toolbox.ByteMatch(System.Byte[],System.Byte[])">
            <summary>
            Checks to see if the contents of two byte arrays are equal
            </summary>
            <param name="array1">The first array</param>
            <param name="array2">The second array</param>
            <returns>True if the arrays are equal, false if they aren't</returns>
        </member>
        <member name="M:MonoTorrent.Toolbox.ByteMatch(System.Byte[],System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Checks to see if the contents of two byte arrays are equal
            </summary>
            <param name="array1">The first array</param>
            <param name="array2">The second array</param>
            <param name="offset1">The starting index for the first array</param>
            <param name="offset2">The starting index for the second array</param>
            <param name="count">The number of bytes to check</param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.Torrent">
            <summary>
            种子对象
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.AnnounceUrls">
            <summary>
            种子文件中包含的发布的URL
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.AzureusProperties">
            <summary>
            This dictionary is specific for azureus client 
            It can contain 
            	dht_backup_enable (number)
            	Content (dictionnary)
             		Publisher
            		Description
            		Title
            		Creation Date
            		Content Hash
            		Revision Date
            		Thumbnail (string) = Base64 encoded image
            		Progressive
            		Speed Bps (number)
            but not useful for MT
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Comment">
            <summary>
            种子文件中包含的注释
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.CreatedBy">
            <summary>
            显示是谁创建的.torrent信息
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.CreationDate">
            <summary>
            The creation date of the .torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.ED2K">
            <summary>
            The optional ED2K hash contained within the .torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Encoding">
            <summary>
            The encoding used by the client that created the .torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Files">
            <summary>
            The list of files contained within the .torrent which are available for download
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.InfoHash">
            <summary>
            This is the infohash that is generated by putting the "Info" section of a .torrent
            through a ManagedSHA1 hasher.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.IsPrivate">
            <summary>
            Shows whether DHT is allowed or not. If it is a private torrent, no peer
            sharing should be allowed.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Name">
            <summary>
            In the case of a single file torrent, this is the name of the file.
            In the case of a multi file torrent, it is the name of the root folder.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Nodes">
            <summary>
            FIXME: No idea what this is.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.PieceLength">
            <summary>
            The length of each piece in bytes.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Pieces">
            <summary>
            This is the array of hashes contained within the torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Publisher">
            <summary>
            发布者的名称
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.PublisherUrl">
            <summary>
            The Url of the publisher of either the content or the .torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.SHA1">
            <summary>
            The optional SHA1 hash contained within the .torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Size">
            <summary>
            下载的所有文件的总大小.
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.Source">
            <summary>
            The source of the .torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.TorrentPath">
            <summary>
            This is the path at which the .torrent file is located
            </summary>
        </member>
        <member name="P:MonoTorrent.Torrent.GetRightHttpSeeds">
            <summary>
            This is the http-based seeding (getright protocole)
            </summary>
        </member>
        <member name="M:MonoTorrent.Torrent.LoadHashPieces(System.Byte[])">
            <summary>
            This method is called internally to read out the hashes from the info section of the
            .torrent file.
            </summary>
            <param name="data">The byte[]containing the hashes from the .torrent file</param>
        </member>
        <member name="M:MonoTorrent.Torrent.LoadTorrentFiles(MonoTorrent.BEncoding.BEncodedList)">
            <summary>
            This method is called internally to load in all the files found within the "Files" section
            of the .torrents infohash
            </summary>
            <param name="list">The list containing the files available to download</param>
        </member>
        <member name="M:MonoTorrent.Torrent.ProcessInfo(MonoTorrent.BEncoding.BEncodedDictionary)">
            <summary>
            This method is called internally to load the information found within the "Info" section
            of the .torrent file
            </summary>
            <param name="dictionary">The dictionary representing the Info section of the .torrent file</param>
        </member>
        <member name="M:MonoTorrent.Torrent.Load(System.String)">
            <summary>
            加载指定路径的种子文件
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:MonoTorrent.Torrent.LoadAsync(System.String)">
            <summary>
            异步加载指定路径的种子文件
            </summary>
            <param name="path">The path to load the .torrent file from</param>
        </member>
        <member name="M:MonoTorrent.Torrent.Load(System.Byte[])">
            <summary>
            Loads a torrent from a byte[] containing the bencoded data
            </summary>
            <param name="data">The byte[] containing the data</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Torrent.LoadAsync(System.Byte[])">
            <summary>
            Loads a torrent from a byte[] containing the bencoded data
            </summary>
            <param name="data">The byte[] containing the data</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Torrent.Load(System.IO.Stream)">
            <summary>
            Loads a .torrent from the supplied stream
            </summary>
            <param name="stream">The stream containing the data to load</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Torrent.LoadAsync(System.IO.Stream)">
            <summary>
            Loads a .torrent from the supplied stream
            </summary>
            <param name="stream">The stream containing the data to load</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Torrent.Load(System.Uri,System.String)">
            <summary>
            Loads a .torrent file from the specified URL
            </summary>
            <param name="url">The URL to download the .torrent from</param>
            <param name="location">The path to download the .torrent to before it gets loaded</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Torrent.LoadAsync(System.Uri,System.String)">
            <summary>
            Loads a .torrent file from the specified URL
            </summary>
            <param name="url">The URL to download the .torrent from</param>
            <param name="location">The path to download the .torrent to before it gets loaded</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Torrent.TryLoad(System.String,MonoTorrent.Torrent@)">
            <summary>
            Loads a .torrent from the specificed path. A return value indicates
            whether the operation was successful.
            </summary>
            <param name="path">The path to load the .torrent file from</param>
            <param name="torrent">If the loading was succesful it is assigned the Torrent</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MonoTorrent.Torrent.TryLoad(System.Byte[],MonoTorrent.Torrent@)">
            <summary>
            Loads a .torrent from the specified byte[]. A return value indicates
            whether the operation was successful.
            </summary>
            <param name="data">The byte[] to load the .torrent from</param>
            <param name="torrent">If loading was successful, it contains the Torrent</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MonoTorrent.Torrent.TryLoad(System.IO.Stream,MonoTorrent.Torrent@)">
            <summary>
            Loads a .torrent from the supplied stream. A return value indicates
            whether the operation was successful.
            </summary>
            <param name="stream">The stream containing the data to load</param>
            <param name="torrent">If the loading was succesful it is assigned the Torrent</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MonoTorrent.Torrent.TryLoad(System.Uri,System.String,MonoTorrent.Torrent@)">
            <summary>
            Loads a .torrent file from the specified URL. A return value indicates
            whether the operation was successful.
            </summary>
            <param name="url">The URL to download the .torrent from</param>
            <param name="location">The path to download the .torrent to before it gets loaded</param>
            <param name="torrent">If the loading was succesful it is assigned the Torrent</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MonoTorrent.Torrent.Load(System.IO.Stream,System.String)">
            <summary>
            Called from either Load(stream) or Load(string).
            </summary>
            <param name="stream"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.FileBytesHashed">
            <summary>
            The number of bytes hashed from the current file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.FileSize">
            <summary>
            The size of the current file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.FileCompletion">
            <summary>
            The percentage of the current file which has been hashed (range 0-1)
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.OverallBytesHashed">
            <summary>
            The number of bytes hashed so far
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.OverallSize">
            <summary>
            The total number of bytes to hash
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.OverallCompletion">
            <summary>
            The percentage of the data which has been hashed (range 0-1)
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentCreatorEventArgs.CurrentFile">
            <summary>
            The path of the current file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.BitField">
            <summary>
            The number of pieces which have been successfully downloaded which are from this file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.ED2K">
            <summary>
            The ED2K hash of the file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.EndPieceIndex">
            <summary>
            The index of the last piece of this file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.Length">
            <summary>
            The length of the file in bytes
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.MD5">
            <summary>
            The MD5 hash of the file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.Path">
            <summary>
            In the case of a single torrent file, this is the name of the file.
            In the case of a multi-file torrent this is the relative path of the file
            (including the filename) from the base directory
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.Priority">
            <summary>
            The priority of this torrent file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.SHA1">
            <summary>
            The SHA1 hash of the file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.StartPieceIndex">
            <summary>
            The index of the first piece of this file
            </summary>
        </member>
        <member name="P:MonoTorrent.TorrentFile.StartPieceOffset">
            <summary>
            Piece byte offset of the file
            </summary>
        </member>
        <member name="F:MonoTorrent.VersionInfo.ProtocolStringV100">
            <summary>
            Protocol string for version 1.0 of Bittorrent Protocol
            </summary>
        </member>
        <member name="P:MonoTorrent.VersionInfo.ClientVersion">
            <summary>
            The current version of the client in the form "MO1234", which represents a version triplet of '1.2.34'.
            </summary>
        </member>
        <member name="F:MonoTorrent.VersionInfo.Version">
            <summary>
            The full version of this library in the form 'A.B.C'.
            'A' and 'B' are guaranteed to be 1 digit each. 'C' can be one or two digits.
            </summary>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: master</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: 99f96ebc</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: 99f96ebc57f8c3731e4293aaf165677ba7345235</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 6</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: </summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 1</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 22</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 1</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 28</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: File</summary>
        </member>
    </members>
</doc>
